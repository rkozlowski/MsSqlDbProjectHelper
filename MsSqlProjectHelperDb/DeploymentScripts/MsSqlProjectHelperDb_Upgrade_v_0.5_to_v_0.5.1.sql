/*
Deployment script for MsSqlProjectHelperDb  (upgrade from v0.5 to v0.5.1)

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MsSqlProjectHelperDb"
:setvar DefaultFilePrefix "MsSqlProjectHelperDb"
:setvar DefaultDataPath "C:\MsSQL\Data\"
:setvar DefaultLogPath "C:\MsSQL\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Altering Procedure [Internal].[GenerateTableTypeCode]...';


GO




ALTER PROCEDURE [Internal].[GenerateTableTypeCode]
	@projectId SMALLINT,
	@dbId SMALLINT,
	@langId TINYINT,
	@ttId INT,
	@errorMessage NVARCHAR(2000) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @rc INT;

	DECLARE @RC_OK INT = 1;
	DECLARE @RC_ERR_PROJECT INT = 21;
	DECLARE @RC_ERR_DB INT = 22;
	DECLARE @RC_ERR_LANG INT = 23;

	DECLARE @TT_TABLE_TYPE_START TINYINT = 24;
	DECLARE @TT_TABLE_TYPE_END TINYINT = 25;
	DECLARE @TT_TABLE_TYPE_PROPERTY TINYINT = 26;
	DECLARE @TT_TABLE_TYPE_DT_START TINYINT = 28;
	DECLARE @TT_TABLE_TYPE_DT_END TINYINT = 29;
	DECLARE @TT_TABLE_TYPE_DT_COLUMN TINYINT = 30;
	DECLARE @TT_TABLE_TYPE_DT_ROWS_START TINYINT = 31;
	DECLARE @TT_TABLE_TYPE_DT_ROWS_END TINYINT = 32;
	DECLARE @TT_TABLE_TYPE_DT_ROW TINYINT = 33;
	DECLARE @TT_TABLE_TYPE_DT_COLUMN_ADD TINYINT = 34;
	DECLARE @TT_TABLE_TYPE_DT_COLUMN_MAX_LEN TINYINT = 35;
	DECLARE @TT_TABLE_TYPE_DT_ROW_NULL TINYINT = 36;

	DECLARE @typeName NVARCHAR(200);
	DECLARE @ttSchema NVARCHAR(128);
	DECLARE @ttName NVARCHAR(128);

	DECLARE @className NVARCHAR(100);
	DECLARE @langOptions BIGINT;
	
	SELECT @className=p.[ClassName], @langOptions=p.[LanguageOptions]
	FROM [dbo].[Project] p
	JOIN [Enum].[ClassAccess] ca ON p.[ClassAccessId]=ca.[Id]
	WHERE p.[Id]=@projectId;

	IF @className IS NULL
	BEGIN
		SELECT @rc = @RC_ERR_PROJECT, @errorMessage=N'Unknown project';
		RETURN @rc;
	END

	SELECT @typeName=tt.[Name], @ttSchema=tt.[SqlTypeSchema], @ttName=tt.[SqlType]
	FROM #TableType tt	
	WHERE tt.[Id]=@ttId;

	IF @typeName IS NULL
	BEGIN
		SELECT @rc = @RC_ERR_PROJECT, @errorMessage=N'Unknown table type';
		RETURN @rc;
	END

	DECLARE @dbName NVARCHAR(128) = DB_NAME(@dbId);

	IF @dbName IS NULL
	BEGIN
		SELECT @rc = @RC_ERR_DB, @errorMessage=N'Database not found';
		RETURN @rc;
	END

    DECLARE @query NVARCHAR(4000);

	DECLARE @vars [Internal].[Variable];
	INSERT INTO @vars ([Name], [Value]) VALUES (N'ClassName', @typeName);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'TtSchema', [Internal].[EscapeString](@langId, QUOTENAME(@ttSchema)));
	INSERT INTO @vars ([Name], [Value]) VALUES (N'TtName', [Internal].[EscapeString](@langId, QUOTENAME(@ttName)));
	
	INSERT INTO @vars ([Name], [Value]) VALUES (N'ClassAccess', N'public');
	INSERT INTO @vars ([Name], [Value]) VALUES (N'PropertyAccess', N'public');
	INSERT INTO @vars ([Name], [Value]) VALUES (N'Type', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'Name', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'BaseType', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'ColumnName', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'AllowNull', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'MaxLength', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'Cast', NULL);
	INSERT INTO @vars ([Name], [Value]) VALUES (N'Sep', N',');
	


	INSERT INTO #Output ([Text])
	SELECT c.[Text]
	FROM [dbo].[Template] t
	CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
	WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_START)
	ORDER BY c.[Id];

	DECLARE @id INT = (SELECT MIN([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0);
	DECLARE @lastId INT = (SELECT MAX([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0);
	DECLARE @name NVARCHAR(128);
	DECLARE @columnName NVARCHAR(128);
	DECLARE @type NVARCHAR(128);
	DECLARE @baseType NVARCHAR(128);


	WHILE @id IS NOT NULL
	BEGIN		
		SELECT @name=ttc.[PropertyName], @columnName=ttc.[Name], @baseType=dtm.[NativeType] + CASE WHEN dtm.[IsNullable]=0 AND ttc.[IsNullable]=1 THEN N'?' ELSE N'' END,
		@type=ISNULL(@className + N'.' + e.[EnumName], dtm.[NativeType]) + CASE WHEN dtm.[IsNullable]=0 AND ttc.[IsNullable]=1 THEN N'?' ELSE N'' END
		FROM #TableTypeColumn ttc 
		JOIN [dbo].[DataTypeMap] dtm ON dtm.[SqlType]=ttc.[SqlType]
		LEFT JOIN #Enum e ON ttc.[EnumId]=e.[Id]
		WHERE ttc.[Id]=@id;

		UPDATE @vars
		SET [Value]=@name
		WHERE [Name]=N'Name';
		UPDATE @vars
		SET [Value]=@type
		WHERE [Name]=N'Type';
		
		IF @id=@lastId
		BEGIN
			UPDATE @vars
			SET [Value]=''
			WHERE [Name]=N'Sep';
		END

		INSERT INTO #Output ([Text])
		SELECT c.[Text]
		FROM [dbo].[Template] t
		CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
		WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_PROPERTY)
		ORDER BY c.[Id];

		SELECT @id=MIN([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0 AND [Id]>@id;
	END

	INSERT INTO #Output ([Text])
	SELECT c.[Text]
	FROM [dbo].[Template] t
	CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
	WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_START)
	ORDER BY c.[Id];

	SELECT @id=MIN([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0;
	DECLARE @allowNull BIT
	DECLARE @maxLength INT;

	WHILE @id IS NOT NULL
	BEGIN		
		SELECT @name=ttc.[PropertyName], @columnName=[Internal].[EscapeString](@langId, ttc.[Name]), @baseType=dtm.[NativeType], -- + CASE WHEN dtm.[IsNullable]=0 AND ttc.[IsNullable]=1 THEN N'?' ELSE N'' END,
		@type=ISNULL(@className + N'.' + e.[EnumName], dtm.[NativeType]) + CASE WHEN dtm.[IsNullable]=0 AND ttc.[IsNullable]=1 THEN N'?' ELSE N'' END,
		@allowNull=ttc.[IsNullable], @maxLength=CASE WHEN dtm.[SizeNeeded]=1 THEN ttc.[MaxLen] ELSE NULL END
		FROM #TableTypeColumn ttc 
		JOIN [dbo].[DataTypeMap] dtm ON dtm.[SqlType]=ttc.[SqlType]
		LEFT JOIN #Enum e ON ttc.[EnumId]=e.[Id]
		WHERE ttc.[Id]=@id;

		UPDATE @vars
		SET [Value]=@name
		WHERE [Name]=N'Name';
		UPDATE @vars
		SET [Value]=@type
		WHERE [Name]=N'Type';

		UPDATE @vars
		SET [Value]=@columnName
		WHERE [Name]=N'ColumnName';
		UPDATE @vars
		SET [Value]=@baseType
		WHERE [Name]=N'BaseType';

		UPDATE @vars
		SET [Value]=CASE WHEN @allowNull=1 THEN N'true' ELSE N'false' END
		WHERE [Name]=N'AllowNull';
		UPDATE @vars
		SET [Value]=@maxLength
		WHERE [Name]=N'MaxLength';

		
		IF @id=@lastId
		BEGIN
			UPDATE @vars
			SET [Value]=''
			WHERE [Name]=N'Sep';
		END

		INSERT INTO #Output ([Text])
		SELECT c.[Text]
		FROM [dbo].[Template] t
		CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
		WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_COLUMN)
		ORDER BY c.[Id];

		IF @maxLength IS NOT NULL
		BEGIN

			INSERT INTO #Output ([Text])
			SELECT c.[Text]
			FROM [dbo].[Template] t
			CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
			WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_COLUMN_MAX_LEN)
			ORDER BY c.[Id];

		END

		INSERT INTO #Output ([Text])
		SELECT c.[Text]
		FROM [dbo].[Template] t
		CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
		WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_COLUMN_ADD)
		ORDER BY c.[Id];

		SELECT @id=MIN([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0 AND [Id]>@id;
	END

	INSERT INTO #Output ([Text])
	SELECT c.[Text]
	FROM [dbo].[Template] t
	CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
	WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_ROWS_START)
	ORDER BY c.[Id];

	SELECT @id=MIN([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0;
	DECLARE @cast NVARCHAR(200);

	WHILE @id IS NOT NULL
	BEGIN		
		SELECT @name=ttc.[PropertyName], @columnName=[Internal].[EscapeString](@langId, ttc.[Name]), @baseType=dtm.[NativeType] + CASE WHEN dtm.[IsNullable]=0 AND ttc.[IsNullable]=1 THEN N'?' ELSE N'' END,
		@type=ISNULL(@className + N'.' + e.[EnumName], dtm.[NativeType]) + CASE WHEN dtm.[IsNullable]=0 AND ttc.[IsNullable]=1 THEN N'?' ELSE N'' END,		
		@allowNull=ttc.[IsNullable], @maxLength=CASE WHEN dtm.[SizeNeeded]=1 THEN ttc.[MaxLen] ELSE NULL END
		FROM #TableTypeColumn ttc 
		JOIN [dbo].[DataTypeMap] dtm ON dtm.[SqlType]=ttc.[SqlType]
		LEFT JOIN #Enum e ON ttc.[EnumId]=e.[Id]
		WHERE ttc.[Id]=@id;

		SET @cast = CASE WHEN @baseType = @type THEN N'' ELSE N'(' + @baseType + N') ' END;

		UPDATE @vars
		SET [Value]=@name
		WHERE [Name]=N'Name';
		UPDATE @vars
		SET [Value]=@type
		WHERE [Name]=N'Type';

		UPDATE @vars
		SET [Value]=@columnName
		WHERE [Name]=N'ColumnName';
		UPDATE @vars
		SET [Value]=@baseType
		WHERE [Name]=N'BaseType';		

		UPDATE @vars
		SET [Value]=CASE WHEN @allowNull=1 THEN N'true' ELSE N'false' END
		WHERE [Name]=N'AllowNull';
		UPDATE @vars
		SET [Value]=@maxLength
		WHERE [Name]=N'MaxLength';

		UPDATE @vars
		SET [Value]=@cast
		WHERE [Name]=N'Cast';
		
		IF @id=@lastId
		BEGIN
			UPDATE @vars
			SET [Value]=''
			WHERE [Name]=N'Sep';
		END

		INSERT INTO #Output ([Text])
		SELECT c.[Text]
		FROM [dbo].[Template] t
		CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
		WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, CASE WHEN @allowNull=1 THEN @TT_TABLE_TYPE_DT_ROW_NULL ELSE @TT_TABLE_TYPE_DT_ROW END)
		ORDER BY c.[Id];		

		SELECT @id=MIN([Id]) FROM #TableTypeColumn WHERE [TableTypeId]=@ttId AND [IsIdentity]=0 AND [Id]>@id;
	END

	INSERT INTO #Output ([Text])
	SELECT c.[Text]
	FROM [dbo].[Template] t
	CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
	WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_ROWS_END)
	ORDER BY c.[Id];

	INSERT INTO #Output ([Text])
	SELECT c.[Text]
	FROM [dbo].[Template] t
	CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
	WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_DT_END)
	ORDER BY c.[Id];

	INSERT INTO #Output ([Text])
	SELECT c.[Text]
	FROM [dbo].[Template] t
	CROSS APPLY [Internal].[ProcessTemplate](t.[Template], @vars) c
	WHERE t.[Id]=[Internal].[GetTemplate](@langId, @langOptions, @TT_TABLE_TYPE_END)
	ORDER BY c.[Id];

	

END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering Procedure [Internal].[GetTableTypeColumns]...';


GO



ALTER PROCEDURE [Internal].[GetTableTypeColumns]
	@projectId SMALLINT,
	@dbId SMALLINT,
	@langId TINYINT,
	@ttId INT,
	@errorMessage NVARCHAR(2000) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @rc INT;

	DECLARE @RC_OK INT = 0;
	DECLARE @RC_ERR_PROJECT INT = 21;
	DECLARE @RC_ERR_DB INT = 22;
	DECLARE @RC_ERR_LANG INT = 23;

	DECLARE @PEM_EXPLICIT_ONLY TINYINT = 1;
	DECLARE @PEM_ENUM_NAME TINYINT = 2;
	DECLARE @PEM_ENUM_NAME_WITH_ID TINYINT = 3;
	DECLARE @PEM_ENUM_NAME_WITH_OR_WITHOUT_ID TINYINT = 4;

	DECLARE @schema NVARCHAR(128);
	DECLARE @name NVARCHAR(128);

	DECLARE @pemId TINYINT;

	SELECT @pemId=[ParamEnumMappingId]      
	FROM [dbo].[Project]
	WHERE [Id]=@projectId;

	IF @pemId IS NULL
	BEGIN
		SELECT @rc = @RC_ERR_PROJECT, @errorMessage=N'Unknown project';
		RETURN @rc;
	END
	

	SELECT @name=[SqlType], @schema=[SqlTypeSchema]
	FROM #TableType
	WHERE [Id]=@ttId;

	IF @name IS NULL
	BEGIN
		SELECT @rc = @RC_ERR_PROJECT, @errorMessage=N'Unknown project or unsupported project options';
		RETURN @rc;
	END

	DECLARE @dbName NVARCHAR(128) = DB_NAME(@dbId);

	IF @dbName IS NULL
	BEGIN
		SELECT @rc = @RC_ERR_DB, @errorMessage=N'Database not found';
		RETURN @rc;
	END

    DECLARE @query NVARCHAR(4000);

	

	SET @query = N'USE ' + QUOTENAME(@dbName) + N';
	';
	SET @query += N'SELECT ' + LOWER(@ttId) + N' [TableTypeId], c.[column_id] [ColumnId], c.[name] [Name], c.is_nullable [IsNullable], t.[name] [SqlType], SCHEMA_NAME(t.schema_id) [SqlTypeSchema], '
	SET @query += N'c.[max_length] [MaxLen], c.[precision] [Precision], c.[scale] [Scale], c.[is_identity] [IsIdentity] '
	SET @query += N'FROM sys.table_types tt '
	SET @query += N'JOIN sys.columns c on c.object_id = tt.type_table_object_id '
	SET @query += N'JOIN sys.types t ON c.system_type_id=t.system_type_id AND c.system_type_id = t.user_type_id '
	SET @query += N'WHERE SCHEMA_NAME(tt.schema_id)=' + QUOTENAME(@schema, N'''') + N' AND tt.[name]=' + QUOTENAME(@name, N'''') + N' '
	SET @query += N'ORDER BY c.[column_id] '
	SET @query += N';
	';
	--PRINT(@query);
	
	INSERT INTO #TableTypeColumn
	([TableTypeId], [ColumnId], [Name], [IsNullable], [SqlType], [SqlTypeSchema], [MaxLen], [Precision], [Scale], [IsIdentity])
	EXEC(@query);

	IF (@pemId IN (@PEM_ENUM_NAME, @PEM_ENUM_NAME_WITH_ID, @PEM_ENUM_NAME_WITH_OR_WITHOUT_ID))
	BEGIN
		UPDATE ttc
		SET ttc.[EnumId]=e.[Id]
		FROM #TableTypeColumn ttc
		JOIN #Enum e ON ttc.[SqlType]=e.[ValueType] 
		AND ((e.[EnumName]=[Internal].[RemoveFromStart](ttc.[Name], N'@') AND @pemId IN (@PEM_ENUM_NAME, @PEM_ENUM_NAME_WITH_OR_WITHOUT_ID)) 
		OR (ttc.[Name] LIKE N'%Id' AND e.[EnumName]=[Internal].[RemoveFromEnd]([Internal].[RemoveFromStart](ttc.[Name], N'@'), N'Id') AND @pemId IN (@PEM_ENUM_NAME_WITH_ID, @PEM_ENUM_NAME_WITH_OR_WITHOUT_ID)))
	END
	SET @rc=@RC_OK;
	RETURN @rc;
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering Procedure [Project].[GenerateCode]...';


GO
ALTER PROCEDURE [Project].[GenerateCode]
	@projectName NVARCHAR(200),
	@errorMessage NVARCHAR(2000) OUTPUT,
	@databaseName NVARCHAR(128) = NULL,	
	@codeGenOptions VARCHAR(1000) = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE  @rc INT;

	DECLARE @RC_OK INT = 0;
	DECLARE @RC_ERR_UNKNOWN_PROJECT INT = 1;
	DECLARE @RC_ERR_UNKNOWN_DB INT = 2;

	SELECT @rc = @RC_OK, @errorMessage = NULL;

	DROP TABLE IF EXISTS #Output;

	DECLARE @OPT_GEN_ENUMS SMALLINT = 1;
	DECLARE @OPT_GEN_RESULT_TYPES SMALLINT = 2;
	DECLARE @OPT_GEN_TVP_TYPES SMALLINT = 4;
	DECLARE @OPT_GEN_SP_WRAPPERS SMALLINT = 8;

	DECLARE @C_PASCAL_CASE TINYINT = 1;
	DECLARE @C_CAMEL_CASE TINYINT = 2;
	DECLARE @C_SNAKE_CASE TINYINT = 3;
	DECLARE @C_UNDERSCORE_CAMEL_CASE TINYINT = 4;
	DECLARE @C_UPPER_SNAKE_CASE TINYINT = 5;

	DECLARE @NT_CLASS TINYINT = 1;
	DECLARE @NT_METHOD TINYINT = 2;
	DECLARE @NT_PROPERTY TINYINT = 3;
	DECLARE @NT_FIELD TINYINT = 4;
	DECLARE @NT_PARAMETER TINYINT = 5;
	DECLARE @NT_LOCAL_VARIABLE TINYINT = 6;
	DECLARE @NT_TUPLE_FIELD TINYINT = 7;
	DECLARE @NT_ENUM TINYINT = 8;
	DECLARE @NT_ENUM_MEMBER TINYINT = 9;

	DECLARE @options SMALLINT = [Internal].[GetCodeGenerationOptions](@codeGenOptions);

	IF ISNULL(@options, 0)=0 
	BEGIN
		SET @options = [Internal].[GetCodeGenerationOptions]('GenAll');
	END

	DECLARE @projectId SMALLINT;
	DECLARE @langId TINYINT;
	

	SELECT @projectId=[Id], @langId=[LanguageId], @databaseName=ISNULL(@databaseName, [DefaultDatabase]) FROM [dbo].[Project] WHERE [Name]=@projectName;

	IF @projectId IS NULL 
	BEGIN
		SELECT @rc = @RC_ERR_UNKNOWN_PROJECT, @errorMessage = 'Unknown project: ' + ISNULL(@projectName, '<NULL>');
		RETURN @rc;
	END;

	DECLARE @dbId SMALLINT = DB_ID(@databaseName);

	IF @dbId IS NULL 
	BEGIN
		SELECT @rc = @RC_ERR_UNKNOWN_DB, @errorMessage = 'Unknown database: ' + ISNULL(@databaseName, '<NULL>')
		RETURN @rc;
	END;

	DROP TABLE IF EXISTS #Enum;
	CREATE TABLE #Enum
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,		
		[Schema] NVARCHAR(128) NOT NULL,
		[Table] NVARCHAR(128) NOT NULL,		
		[NameColumn] NVARCHAR(128) NOT NULL,
		[ValueColumn] NVARCHAR(128) NOT NULL,
		[EnumName] NVARCHAR(200) NULL,
		[ValueType] NVARCHAR(128) NOT NULL,
		UNIQUE ([Schema], [Table])
	);

	DROP TABLE IF EXISTS #EnumVal;
	CREATE TABLE #EnumVal
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,		
		[EnumId] INT NOT NULL,		
		[Name] VARCHAR(200) NOT NULL,
		[Value] BIGINT NOT NULL,		
		UNIQUE ([EnumId], [Name]),
		UNIQUE ([EnumId], [Value])
	);

	DROP TABLE IF EXISTS #EnumForeignKey;
	CREATE TABLE #EnumForeignKey
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,		
		[EnumId] INT NOT NULL,
		[ForeignSchema] NVARCHAR(128) NOT NULL,
		[ForeignTable] NVARCHAR(128) NOT NULL,
		[ForeignColumn] NVARCHAR(128) NOT NULL,		
		UNIQUE ([EnumId], [ForeignSchema], [ForeignTable], [ForeignColumn]),
		UNIQUE ([ForeignSchema], [ForeignTable], [ForeignColumn])		
	);

	DROP TABLE IF EXISTS #StoredProc;
	CREATE TABLE #StoredProc 
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[Schema] NVARCHAR(128) NOT NULL, 
		[Name] NVARCHAR(128) NOT NULL,
		[WrapperName] NVARCHAR(200) NULL,
		[HasResultSet] BIT NOT NULL DEFAULT (0),
		[ResultType] NVARCHAR(200) NOT NULL DEFAULT(N'int'),
		UNIQUE ([Schema], [Name])
	);

	DROP TABLE IF EXISTS #StoredProcParam;
	CREATE TABLE #StoredProcParam
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[StoredProcId] INT NOT NULL,
		[ParamId] INT NOT NULL, 
		[Name] NVARCHAR(128) NOT NULL, 
		[SqlType] NVARCHAR(128) NOT NULL, 
		[SqlTypeSchema] NVARCHAR(128) NOT NULL, 
		[MaxLen] SMALLINT NOT NULL, 
		[Precision] TINYINT NOT NULL, 
		[Scale] TINYINT NOT NULL, 
		[IsOutput] BIT NOT NULL, 
		[IsReadOnly] BIT NOT NULL, 
		[IsTypeUserDefined] BIT NOT NULL, 
		[IsTableType] BIT NOT NULL,
		[EnumId] INT NULL,
		[ParamName]  NVARCHAR(200) NULL,
		UNIQUE ([StoredProcId], [ParamId]),
		UNIQUE ([StoredProcId], [Name])
	);

	DROP TABLE IF EXISTS #SingleStoredProcResultSet;
	CREATE TABLE #SingleStoredProcResultSet (
		[is_hidden] BIT NOT NULL,
		[column_ordinal] INT NOT NULL,
		[name] SYSNAME NULL,
		[is_nullable] BIT NOT NULL,
		[system_type_id] INT NOT NULL,
		[system_type_name] NVARCHAR(256) NULL,
		[max_length] SMALLINT NOT NULL,
		[precision] TINYINT NOT NULL,
		[scale] TINYINT NOT NULL,
		[collation_name] SYSNAME NULL,
		[user_type_id] INT NULL,
		[user_type_database] SYSNAME NULL,
		[user_type_schema] SYSNAME NULL,
		[user_type_name] SYSNAME NULL,
		[assembly_qualified_type_name] NVARCHAR(4000),
		[xml_collection_id] INT NULL,
		[xml_collection_database] SYSNAME NULL,
		[xml_collection_schema] SYSNAME NULL,
		[xml_collection_name] SYSNAME NULL,
		[is_xml_document] BIT NOT NULL,
		[is_case_sensitive] BIT NOT NULL,
		[is_fixed_length_clr_type] BIT NOT NULL,
		[source_server] SYSNAME NULL,
		[source_database] SYSNAME NULL,
		[source_schema] SYSNAME NULL,
		[source_table] SYSNAME NULL,
		[source_column] SYSNAME NULL,
		[is_identity_column] BIT NULL,
		[is_part_of_unique_key] BIT NULL,
		[is_updateable] BIT NULL,
		[is_computed_column] BIT NULL,
		[is_sparse_column_set] BIT NULL,
		[ordinal_in_order_by_list] SMALLINT NULL,
		[order_by_list_length] SMALLINT NULL,
		[order_by_is_descending] SMALLINT NULL,
		[tds_type_id] INT NOT NULL,
		[tds_length] INT NOT NULL,
		[tds_collation_id] INT NULL,
		[tds_collation_sort_id] TINYINT NULL
	);

	DROP TABLE IF EXISTS #StoredProcResultSet;
	CREATE TABLE #StoredProcResultSet (
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[StoredProcId] INT NOT NULL,
		[ColumnOrdinal] INT NOT NULL,
		[Name] SYSNAME NULL,
		[IsNullable] BIT NOT NULL,
		[SqlType] NVARCHAR(128) NOT NULL, 
		[SqlTypeSchema] NVARCHAR(128) NOT NULL, 
		[MaxLen] SMALLINT NOT NULL, 
		[Precision] TINYINT NOT NULL, 
		[Scale] TINYINT NOT NULL,
		[EnumId] INT NULL,
		UNIQUE ([StoredProcId], [ColumnOrdinal])
	);

	DROP TABLE IF EXISTS #StoredProcResultType;
	CREATE TABLE #StoredProcResultType
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[StoredProcId] INT NOT NULL UNIQUE,
		[Name] NVARCHAR(200) NOT NULL UNIQUE
	);

	DROP TABLE IF EXISTS #TableType;
	CREATE TABLE #TableType
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[SqlType] NVARCHAR(128) NOT NULL, 
		[SqlTypeSchema] NVARCHAR(128) NOT NULL,
		[Name] NVARCHAR(200) NOT NULL UNIQUE,
		UNIQUE ([SqlType], [SqlTypeSchema])
	);

	DROP TABLE IF EXISTS #TableTypeColumn;
	CREATE TABLE #TableTypeColumn
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[TableTypeId] INT NOT NULL,
		[ColumnId] INT NOT NULL,
		[Name] SYSNAME NULL,
		[IsNullable] BIT NOT NULL,
		[SqlType] NVARCHAR(128) NOT NULL, 
		[SqlTypeSchema] NVARCHAR(128) NOT NULL, 
		[MaxLen] SMALLINT NOT NULL, 
		[Precision] TINYINT NOT NULL, 
		[Scale] TINYINT NOT NULL,
        [IsIdentity] BIT NOT NULL,
		[EnumId] INT NULL,
		[PropertyName] NVARCHAR(200) NULL,
	);

	DECLARE	@retVal int;
	
	
    EXEC @retVal = [Internal].[GetEnums] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @errorMessage = @errorMessage OUTPUT;
	IF @retVal<>0
	BEGIN
		SELECT @rc = @retVal;
		RETURN @rc;
	END

	UPDATE #Enum SET [EnumName]=[Internal].[GetName](@projectId, @NT_ENUM, [Table], [Schema]);

	DECLARE @id INT = (SELECT MIN([Id]) FROM #Enum);
	
	WHILE @id IS NOT NULL
	BEGIN
		EXEC @retVal = [Internal].[GetEnumValues] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @enumId = @id, @errorMessage = @errorMessage OUTPUT;
		IF @retVal<>0
		BEGIN
			SELECT @rc = @retVal;
			RETURN @rc;
		END

		EXEC @retVal = [Internal].[GetEnumForeignKeys] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @enumId = @id, @errorMessage = @errorMessage OUTPUT;
		IF @retVal<>0
		BEGIN
			SELECT @rc = @retVal;
			RETURN @rc;
		END
		

		SELECT @id = MIN([Id]) FROM #Enum WHERE [Id]>@id;
	END

	UPDATE #EnumVal SET [Name]=[Internal].[GetName](@projectId, @NT_ENUM_MEMBER, [Name], NULL);

	/*
	SELECT e.[Schema], e.[Table], e.[EnumName], fk.*
	FROM #Enum e
	JOIN #EnumForeignKey fk ON fk.[EnumId]=e.[Id]
	ORDER BY e.[Id], fk.[Id];
	*/

	EXEC @retVal = [Internal].[GetStoredProcedures] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @errorMessage = @errorMessage OUTPUT;
	IF @retVal<>0
	BEGIN
		SELECT @rc = @retVal;
		RETURN @rc;
	END

	SELECT @id=MIN([Id]) FROM #StoredProc;
	
	WHILE @id IS NOT NULL
	BEGIN
		EXEC @retVal = [Internal].[GetStoredProcParams] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @spId = @id, @errorMessage = @errorMessage OUTPUT;
		IF @retVal<>0
		BEGIN
			SELECT @rc = @retVal;
			RETURN @rc;
		END
		
		EXEC @retVal = [Internal].[GetStoredProcResultSet] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @spId = @id, @errorMessage = @errorMessage OUTPUT;
		IF @retVal<>0
		BEGIN
			SELECT @rc = @retVal;
			RETURN @rc;
		END

		SELECT @id = MIN([Id]) FROM #StoredProc WHERE [Id]>@id;
	END

	UPDATE #StoredProc SET [WrapperName]=[Internal].[GetName](@projectId, @NT_METHOD, [Name], [Schema]);

	UPDATE sp
	SET sp.[HasResultSet]=1, sp.[ResultType]=[Internal].[GetName](@projectId, @NT_CLASS, sp.[WrapperName] + N'Result', NULL)
	FROM #StoredProc sp
	WHERE EXISTS (SELECT 1 FROM #StoredProcResultSet rs WHERE rs.[StoredProcId]=sp.[Id]);
	
	INSERT INTO #StoredProcResultType ([StoredProcId], [Name])
	SELECT [Id], [ResultType]
	FROM #StoredProc
	WHERE [HasResultSet]=1;

	UPDATE #StoredProcParam SET [ParamName]=[Internal].[GetName](@projectId, @NT_PARAMETER, [Name], NULL);

	INSERT INTO #TableType ([SqlType], [SqlTypeSchema], [Name])
	SELECT DISTINCT spp.[SqlType], spp.[SqlTypeSchema], [Internal].[GetName](@projectId, @NT_CLASS, spp.[SqlType], spp.[SqlTypeSchema])
	FROM #StoredProcParam spp
	WHERE spp.[IsTypeUserDefined]=1 AND spp.IsTableType=1;

	SELECT @id=MIN([Id]) FROM #TableType;
	
	WHILE @id IS NOT NULL
	BEGIN
		EXEC @retVal = [Internal].[GetTableTypeColumns] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @ttId = @id, @errorMessage = @errorMessage OUTPUT;
		IF @retVal<>0
		BEGIN
			SELECT @rc = @retVal;
			RETURN @rc;
		END
		
		SELECT @id = MIN([Id]) FROM #TableType WHERE [Id]>@id;
	END

	UPDATE #TableTypeColumn
	SET [PropertyName]=[Internal].[GetName](@projectId, @NT_PROPERTY, [Name], NULL);

	--SELECT * FROM #Enum ORDER BY [Id];
	--SELECT * FROM #EnumVal ORDER BY [Id];
	--SELECT * FROM #StoredProc ORDER BY [Id];
	--SELECT * FROM #StoredProcParam ORDER BY [Id];
	--SELECT * FROM #StoredProcResultSet ORDER BY [Id];
	--SELECT * FROM #TableType;
	--SELECT * FROM #TableTypeColumn ORDER BY [Id];

	CREATE TABLE #Output
	(
		[Id] INT NOT NULL IDENTITY (1, 1) PRIMARY KEY,
		[Text] NVARCHAR(MAX) NOT NULL
	);

	
	EXECUTE @retVal = [Internal].[GenerateStartCode] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @errorMessage = @errorMessage OUTPUT;
	IF @retVal<>0
	BEGIN
		SELECT @rc = @retVal;
		RETURN @rc;
	END

	IF (@options & @OPT_GEN_ENUMS) = @OPT_GEN_ENUMS
	BEGIN
		 SELECT @id=MIN([Id]) FROM #Enum;
		 WHILE @id IS NOT NULL
		 BEGIN
			EXEC @retVal = [Internal].[GenerateEnumCode] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @enumId = @id, @errorMessage = @errorMessage OUTPUT;
			IF @retVal<>0
			BEGIN
				SELECT @rc = @retVal;
				RETURN @rc;
			END
			SELECT @id=MIN([Id]) FROM #Enum WHERE [Id] > @id;
		 END
	END

	IF (@options & @OPT_GEN_RESULT_TYPES) = @OPT_GEN_RESULT_TYPES
	BEGIN
		 SELECT @id=MIN([Id]) FROM #StoredProcResultType;
		 WHILE @id IS NOT NULL
		 BEGIN
			EXEC @retVal = [Internal].[GenerateResultTypeCode] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @rtId = @id, @errorMessage = @errorMessage OUTPUT;
			IF @retVal<>0
			BEGIN
				SELECT @rc = @retVal;
				RETURN @rc;
			END
			SELECT @id=MIN([Id]) FROM #StoredProcResultType WHERE [Id] > @id;
		 END
	END

	IF (@options & @OPT_GEN_TVP_TYPES) = @OPT_GEN_TVP_TYPES
	BEGIN
		 SELECT @id=MIN([Id]) FROM #TableType;
		 WHILE @id IS NOT NULL
		 BEGIN
			EXEC @retVal = [Internal].[GenerateTableTypeCode] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @ttId = @id, @errorMessage = @errorMessage OUTPUT;
			IF @retVal<>0
			BEGIN
				SELECT @rc = @retVal;
				RETURN @rc;
			END
			SELECT @id=MIN([Id]) FROM #TableType WHERE [Id] > @id;
		 END
	END

	
	
	IF (@options & @OPT_GEN_SP_WRAPPERS) = @OPT_GEN_SP_WRAPPERS
	BEGIN
		 SELECT @id=MIN([Id]) FROM #StoredProc;
		 WHILE @id IS NOT NULL
		 BEGIN
			EXEC @retVal = [Internal].[GenerateStoredProcWrapperCode] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @spId = @id, @errorMessage = @errorMessage OUTPUT;
			IF @retVal<>0
			BEGIN
				SELECT @rc = @retVal;
				RETURN @rc;
			END
			SELECT @id=MIN([Id]) FROM #StoredProc WHERE [Id] > @id;
		 END
	END

	EXECUTE @retVal = [Internal].[GenerateEndCode] @projectId = @projectId, @dbId = @dbId, @langId = @langId, @errorMessage = @errorMessage OUTPUT;
	IF @retVal<>0
	BEGIN
		SELECT @rc = @retVal;
		RETURN @rc;
	END
	
	SELECT [Text]
	FROM #Output
	ORDER BY [Id];
	
	DROP TABLE IF EXISTS #Output;
	DROP TABLE IF EXISTS #Enum;
	DROP TABLE IF EXISTS #EnumVal;
	DROP TABLE IF EXISTS #StoredProc;
	DROP TABLE IF EXISTS #StoredProcParam;
	DROP TABLE IF EXISTS #SingleStoredProcResultSet;
	DROP TABLE IF EXISTS #EnumForeignKey;
	DROP TABLE IF EXISTS #StoredProcResultType;
	DROP TABLE IF EXISTS #TableType;
	DROP TABLE IF EXISTS #TableTypeColumn;

	SET @rc = @RC_OK;
	RETURN @rc;
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
GO
/*
Post-Deployment Script							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--table [Enum].[Language]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[Language] WHERE [Id]=1) 
INSERT INTO [Enum].[Language] ([Id], [Name]) 
VALUES (1, N'c#');


--table [Enum].[ClassAccess]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=1) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (1, N'public');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=2) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (2, N'protected');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=3) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (3, N'private');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=4) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (4, N'internal');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=5) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (5, N'protected internal');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=6) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (6, N'private protected');


--table [Enum].[Casing]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=1) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (1, N'PascalCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=2) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (2, N'CamelCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=3) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (3, N'SnakeCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=4) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (4, N'UnderscoreCamelCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=5) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (5, N'UpperSnakeCase');


--table [Enum].[ParamEnumMapping]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=1) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (1, N'ExplicitOnly');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=2) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (2, N'EnumName');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=3) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (3, N'EnumNameWithId');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=4) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (4, N'EnumNameWithOrWithoutId');


--table [Enum].[TemplateType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=1) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (1, N'StartComment');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=2) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (2, N'End');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=3) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (3, N'EnumStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=4) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (4, N'EnumEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=5) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (5, N'EnumEntry');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=6) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (6, N'ResultTypeStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=7) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (7, N'ResultTypeEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=8) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (8, N'ResultTypeProperty');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=10) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (10, N'WrapperStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=11) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (11, N'WrapperEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=12) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (12, N'WrapperPrep');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=13) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (13, N'WrapperExec');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=14) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (14, N'WrapperParam');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=15) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (15, N'WrapperParamPreExecInput');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=16) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (16, N'WrapperParamPreExecOutput');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=17) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (17, N'WrapperExecRS');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=19) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (19, N'WrapperParamPostExec');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=20) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (20, N'WrapperStart2');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=21) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (21, N'WrapperReturnParam');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=22) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (22, N'WrapperEnd2');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=23) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (23, N'WrapperReturnParamDec');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=24) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (24, N'TableTypeStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=25) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (25, N'TableTypeEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=26) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (26, N'TableTypeProperty');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=27) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (27, N'WrapperParamPreExecTableType');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=28) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (28, N'TableTypeDtStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=29) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (29, N'TableTypeDtEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=30) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (30, N'TableTypeDtColumn');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=31) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (31, N'TableTypeDtRowsStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=32) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (32, N'TableTypeDtRowsEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=33) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (33, N'TableTypeDtRow');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=34) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (34, N'TableTypeDtColumnAdd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=35) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (35, N'TableTypeDtColumnMaxLen');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=36) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (36, N'TableTypeDtRowNull');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=37) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (37, N'StartUsing');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=38) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (38, N'StartClass');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=39) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (39, N'StartCommentTool');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=40) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (40, N'StartCommentEnv');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=41) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (41, N'StartCommentEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=42) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (42, N'StaticCtorEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=43) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (43, N'RsMappingSetup');


--table [Enum].[NameType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=1) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (1, N'Class');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=2) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (2, N'Method');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=3) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (3, N'Property');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=4) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (4, N'Field');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=5) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (5, N'Parameter');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=6) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (6, N'LocalVariable');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=7) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (7, N'TupleField');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=8) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (8, N'Enum');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=9) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (9, N'EnumMember');


--table [Flag].[CodeGenOption]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=0) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (0, N'None', 0);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=1) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (1, N'GenEnums', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=2) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (2, N'GenResultTypes', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=4) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (4, N'GenTvpTypes', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=8) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (8, N'GenSpWrappers', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=32767) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (32767, N'GenAll', 0);


-- table: [dbo].[DataTypeMap]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'tinyint') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'tinyint', N'byte', N'SqlDbType.TinyInt', N'DbType.Byte', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'smallint') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'smallint', N'short', N'SqlDbType.SmallInt', N'DbType.Int16', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'int') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'int', N'int', N'SqlDbType.Int', N'DbType.Int32', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'bigint') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'bigint', N'long', N'SqlDbType.BigInt', N'DbType.Int64', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'varchar') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'varchar', N'string', N'SqlDbType.VarChar', N'DbType.AnsiString', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'char') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'char', N'string', N'SqlDbType.Char', N'DbType.AnsiStringFixedLength', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'nvarchar') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'nvarchar', N'string', N'SqlDbType.NVarChar', N'DbType.String', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'nchar') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'nchar', N'string', N'SqlDbType.NChar', N'DbType.StringFixedLength', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'date') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'date', N'DateOnly', N'SqlDbType.Date', N'DbType.Date', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'time') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'time', N'TimeOnly', N'SqlDbType.Time', N'DbType.Time', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'datetime2') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'datetime2', N'DateTime', N'SqlDbType.DateTime2', N'DbType.DateTime2', 0, 0, 0, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'datetimeoffset') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'datetimeoffset', N'DateTimeOffset', N'SqlDbType.DateTimeOffset', N'DbType.DateTimeOffset', 0, 0, 0, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'smalldatetime') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'smalldatetime', N'DateTime', N'SqlDbType.DateTime', N'DbType.DateTime', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'datetime') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'datetime', N'DateTime', N'SqlDbType.DateTime', N'DbType.DateTime', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'real') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'real', N'float', N'SqlDbType.Real', N'DbType.Single', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'float') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'float', N'double', N'SqlDbType.Float', N'DbType.Double', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'money') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'money', N'decimal', N'SqlDbType.Money', N'DbType.Decimal', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'decimal') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'decimal', N'decimal', N'SqlDbType.Decimal', N'DbType.Decimal', 0, 0, 1, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'numeric') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'numeric', N'decimal', N'SqlDbType.Decimal', N'DbType.Decimal', 0, 0, 1, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'smallmoney') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'smallmoney', N'decimal', N'SqlDbType.SmallMoney', N'DbType.Decimal', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'bit') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'bit', N'bool', N'SqlDbType.Bit', N'DbType.Boolean', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'varbinary') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'varbinary', N'byte[]', N'SqlDbType.VarBinary', N'DbType.Binary', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'binary') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'binary', N'byte[]', N'SqlDbType.VarBinary', N'DbType.Binary', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'uniqueidentifier') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'uniqueidentifier', N'Guid', N'SqlDbType.UniqueIdentifier', N'DbType.Guid', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'sql_variant') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'sql_variant', N'object', N'SqlDbType.Variant', N'DbType.Object', 1, 0, 0, 0);


-- table: [dbo].[LanguageNameCasing]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=1) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 1, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=2) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 2, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=3) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 3, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=4) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 4, 2);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=5) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 5, 2);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=6) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 6, 2);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=7) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 7, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=8) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 8, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=9) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 9, 1);



-- Completion time: 2024-02-21T17:37:54.3949189+00:00


IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId] IS NULL AND [Name]='GenerateStaticClass')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (NULL, 'GenerateStaticClass', 0x0000000000000001);
END

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId] IS NULL AND [Name]='TreatOutputParamsAsInputOutput')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (NULL, 'TreatOutputParamsAsInputOutput', 0x0000000000000002);
END

DECLARE @langId TINYINT = (SELECT [Id] FROM [Enum].[Language] WHERE [Name]='c#');

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId]=@langId AND [Name]='TargetClassicDotNet')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (@langId, 'TargetClassicDotNet', 0x0000000000010000);
END


IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId]=@langId AND [Name]='UseSyncWrappers')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (@langId, 'UseSyncWrappers', 0x0000000000020000);
END





DROP TABLE IF EXISTS #Template;
GO

CREATE TABLE #Template
(
    [Id] [smallint] IDENTITY(1,1) NOT NULL PRIMARY KEY,
    [LanguageId] [tinyint] NOT NULL,
    [TypeId] [tinyint] NOT NULL,
    [LanguageOptions] BIGINT NOT NULL DEFAULT(0),
    [Template] [nvarchar](4000) NOT NULL,
    UNIQUE ([LanguageId], [TypeId], [LanguageOptions])
);
GO

DECLARE @langId TINYINT = (SELECT [Id] FROM [Enum].[Language] WHERE [Name] = 'c#');

DECLARE @TT_START_COMMENT TINYINT = 1;
DECLARE @TT_END TINYINT = 2;
DECLARE @TT_ENUM_START TINYINT = 3;
DECLARE @TT_ENUM_END TINYINT = 4;
DECLARE @TT_ENUM_ENTRY TINYINT = 5;
DECLARE @TT_RESULT_TYPE_START TINYINT = 6;
DECLARE @TT_RESULT_TYPE_END TINYINT = 7;
DECLARE @TT_RESULT_TYPE_PROPERTY TINYINT = 8;
DECLARE @TT_WRAPPER_START TINYINT = 10;
DECLARE @TT_WRAPPER_END TINYINT = 11;
DECLARE @TT_WRAPPER_PREP TINYINT = 12;
DECLARE @TT_WRAPPER_EXEC TINYINT = 13;
DECLARE @TT_WRAPPER_PARAM TINYINT = 14;
DECLARE @TT_WRAPPER_PARAM_PRE_EXEC_INPUT TINYINT = 15;
DECLARE @TT_WRAPPER_PARAM_PRE_EXEC_OUTPUT TINYINT = 16;
DECLARE @TT_WRAPPER_EXEC_RS TINYINT = 17;
DECLARE @TT_WRAPPER_PARAM_POST_EXEC TINYINT = 19;
DECLARE @TT_WRAPPER_START2 TINYINT = 20;
DECLARE @TT_WRAPPER_RETURN_PARAM TINYINT = 21;
DECLARE @TT_WRAPPER_END2 TINYINT = 22;
DECLARE @TT_WRAPPER_RETURN_PARAM_DEC TINYINT = 23;
DECLARE @TT_TABLE_TYPE_START TINYINT = 24;
DECLARE @TT_TABLE_TYPE_END TINYINT = 25;
DECLARE @TT_TABLE_TYPE_PROPERTY TINYINT = 26;
DECLARE @TT_WRAPPER_PARAM_PRE_EXEC_TABLE_TYPE TINYINT = 27;
DECLARE @TT_TABLE_TYPE_DT_START TINYINT = 28;
DECLARE @TT_TABLE_TYPE_DT_END TINYINT = 29;
DECLARE @TT_TABLE_TYPE_DT_COLUMN TINYINT = 30;
DECLARE @TT_TABLE_TYPE_DT_ROWS_START TINYINT = 31;
DECLARE @TT_TABLE_TYPE_DT_ROWS_END TINYINT = 32;
DECLARE @TT_TABLE_TYPE_DT_ROW TINYINT = 33;
DECLARE @TT_TABLE_TYPE_DT_COLUMN_ADD TINYINT = 34;
DECLARE @TT_TABLE_TYPE_DT_COLUMN_MAX_LEN TINYINT = 35;
DECLARE @TT_TABLE_TYPE_DT_ROW_NULL TINYINT = 36;
DECLARE @TT_START_USING TINYINT = 37;
DECLARE @TT_START_CLASS TINYINT = 38;
DECLARE @TT_START_COMMENT_TOOL TINYINT = 39;
DECLARE @TT_START_COMMENT_ENV TINYINT = 40;
DECLARE @TT_START_COMMENT_END TINYINT = 41;
DECLARE @TT_STATIC_CTOR_END TINYINT = 42;
DECLARE @TT_RS_MAPPING_SETUP TINYINT = 43;

DECLARE @LO_GENERATE_STATIC_CLASS BIGINT = 1;
DECLARE @LO_TREAT_OUTPUT_PARAMS_AS_INPUT_OUTPUT BIGINT = 2;
DECLARE @LO_TARGET_CLASSIC_DOT_NET BIGINT = 65536;
DECLARE @LO_USE_SYNC_WRAPPERS BIGINT = 131072;

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT, 
N'// <auto-generated>
//     This code was generated by a tool.
//
//     Project name:    @{ProjectName}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT_ENV, 
N'//     Source database: @{Database}
//     Source server:   @{ServerName}
//     Source instance: @{InstanceName}
//     Database user:   @{DbUser}
//     Timestamp:       @{Timestamp}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT_TOOL, 
N'//     Tool name:       @{ToolName}
//     Tool database:   @{ToolDatabase}
//     Tool version:    @{ToolVersion}
//     Tool URL:        @{ToolUrl}');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT_END, 
N'//
//     Changes to this file may cause incorrect behavior 
//     and will be lost if the code is regenerated.
// </auto-generated>
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_USING,
N'using System.Data;
using System.Data.Common;
using System.Data.Linq.Mapping;
using Microsoft.Data.SqlClient;
using Dapper;
');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_START_USING, @LO_TARGET_CLASSIC_DOT_NET,
N'using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.Linq.Mapping;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Dapper;
');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_START_USING, @LO_TARGET_CLASSIC_DOT_NET | @LO_USE_SYNC_WRAPPERS,
N'using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.Linq.Mapping;
using System.Collections.Generic;
using System.Linq;
using Dapper;
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_CLASS,
N'namespace @{NamespaceName}
{
    @{ClassAccess} partial class @{ClassName}
    {
        public string ConnectionString { get; set; }

        public int DefaultCommandTimeoutSec { get; set; } = 30;
        
        public @{ClassName}(string connectionString = null)
        {
            ConnectionString = connectionString;
        }

        protected virtual DbConnection GetDbConnection()
        {
            return new SqlConnection(ConnectionString);
        }

        static @{ClassName}()
        {
');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_START_CLASS, @LO_GENERATE_STATIC_CLASS,
N'namespace @{NamespaceName}
{
    @{ClassAccess} static partial class @{ClassName}
    {
        public static string ConnectionString { get; set; }

        public static int DefaultCommandTimeoutSec { get; set; } = 30;
        
        private static DbConnection GetDbConnection()
        {
            return new SqlConnection(ConnectionString);
        }
        
        static @{ClassName}()
        {
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_STATIC_CTOR_END, 
N'        }
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RS_MAPPING_SETUP, 
N'            SqlMapper.SetTypeMap(
                typeof(@{RsType}),
                new CustomPropertyTypeMap(
                    typeof(@{RsType}),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_END, 
N'
    }
}
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_START, 
N'
        // Source table: @{EnumSchema}.@{EnumTable}
        @{EnumAccess} enum @{EnumName}
        {');




INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_END, 
N'        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_ENTRY, N'            @{Name} = @{Value}@{Sep}');





INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RESULT_TYPE_START, 
N'
        // Result type for a stored procedure: @{SpSchema}.@{SpName}
        @{ClassAccess} partial class @{ClassName}
        {');




INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RESULT_TYPE_END, 
N'        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RESULT_TYPE_PROPERTY, 
N'            [Column(Name="@{ColumnName}")]
            @{PropertyAccess} @{Type} @{Name} { get; set; }');




INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_START, 
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} async Task<@{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START, @LO_GENERATE_STATIC_CLASS,
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} static async Task<@{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START, @LO_USE_SYNC_WRAPPERS,
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} @{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START, @LO_GENERATE_STATIC_CLASS | @LO_USE_SYNC_WRAPPERS,
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} static @{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_START2, 
N'        @{TupleEnd}> @{WrapperName}Async(');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START2, @LO_USE_SYNC_WRAPPERS,
N'        @{TupleEnd} @{WrapperName}(');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PREP, N'        )
        {
            @{ResultType} @{ResultVarName};
            var p = new DynamicParameters();
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC, N'            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
                await connection.ExecuteAsync("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);
                connection.Close();
            }
            @{ResultVarName} = p.Get<@{ResultType}>("@returnValue");
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC_RS, N'
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();

                var queryResult = await connection.QueryAsync<@{ResultTypeSingle}>("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);

                connection.Close();
                @{ResultVarName} = queryResult.ToList();
            }
');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC, @LO_USE_SYNC_WRAPPERS, 
N'            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                connection.Open();
                connection.Execute("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);
                connection.Close();
            }
            @{ResultVarName} = p.Get<@{ResultType}>("@returnValue");
');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC_RS, @LO_USE_SYNC_WRAPPERS,
N'
            using (var connection = GetDbConnection())
            {
                connection.Open();

                var queryResult = connection.Query<@{ResultTypeSingle}>("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);

                connection.Close();
                @{ResultVarName} = queryResult.ToList();
            }
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_END, 
N'            return @{TupleStart}
                @{ResultVarName}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_END2, 
N'            @{TupleEnd};
        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM, N'            @{Type} @{ParamName}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_RETURN_PARAM, N'                @{ParamName}@{Sep}');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_RETURN_PARAM_DEC, N'            @{Type} @{ParamName}@{Sep}');



INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_INPUT, N'            p.Add("@{Name}", @{TypeCast}@{ParamName});');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_OUTPUT, N'            p.Add("@{Name}", null, @{DbType}, ParameterDirection.Output, @{Size}, @{Precision}, @{Scale});');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_OUTPUT, @LO_TREAT_OUTPUT_PARAMS_AS_INPUT_OUTPUT, 
N'            p.Add("@{Name}", @{ParamName}, @{DbType}, ParameterDirection.InputOutput, @{Size}, @{Precision}, @{Scale});');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_TABLE_TYPE, N'
            var @{DtName} = @{TableType}.ToDataTable(@{ParamName});            
            p.Add("@{Name}", @{DtName}.AsTableValuedParameter("@{TvpName}"));
            ');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_POST_EXEC, N'            var @{ParamName} = @{TypeCast}p.Get<@{Type}>("@{Name}");');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_POST_EXEC, @LO_TREAT_OUTPUT_PARAMS_AS_INPUT_OUTPUT, N'            @{ParamName} = @{TypeCast}p.Get<@{Type}>("@{Name}");');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_START, 
N'
        // Table type: @{TtSchema}.@{TtName}
        @{ClassAccess} partial class @{ClassName}
        {');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_END, 
N'        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_PROPERTY, N'            @{PropertyAccess} @{Type} @{Name} { get; set; }');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_START, 
N'
            public static DataTable ToDataTable(IEnumerable<@{ClassName}> records)        
            {
                var table = new DataTable("@{TtSchema}.@{TtName}");
                DataColumn column;
                DataRow row;
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_END, 
N'                return table;
            }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN, 
N'                column = new DataColumn();
                column.DataType = typeof(@{BaseType});
                column.ColumnName = "@{ColumnName}";
                column.AllowDBNull = @{AllowNull};');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN_MAX_LEN, 
N'                column.MaxLength = @{MaxLength};');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN_ADD, 
N'                table.Columns.Add(column);                
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROWS_START, 
N'                foreach (var record in records)
                {
                    row = table.NewRow();');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROWS_END, 
N'                    table.Rows.Add(row);  
                }
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROW, 
N'                row["@{ColumnName}"] = @{Cast}record.@{Name};');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROW_NULL, 
N'                row["@{ColumnName}"] = (object)(@{Cast}record.@{Name}) ?? DBNull.Value;');


GO



UPDATE xt
SET xt.[Template]=t.[Template]
FROM #Template t
JOIN [dbo].[Template] xt ON t.[LanguageId]=xt.[LanguageId] AND  t.[TypeId]=xt.[TypeId] AND t.[LanguageOptions]=xt.[LanguageOptions]

GO

INSERT INTO [dbo].[Template]
([LanguageId], [TypeId], [LanguageOptions], [Template])
SELECT 
t.[LanguageId], t.[TypeId], t.[LanguageOptions], t.[Template]
FROM #Template t
LEFT JOIN [dbo].[Template] xt ON t.[LanguageId]=xt.[LanguageId] AND  t.[TypeId]=xt.[TypeId] AND t.[LanguageOptions]=xt.[LanguageOptions]
WHERE xt.[Id] IS NULL;
GO

DROP TABLE IF EXISTS #Template;
GO

DECLARE @version VARCHAR(50) = '0.5.1';
DECLARE @description NVARCHAR(500) = N'Added support for identity column in TVPs.'

IF NOT EXISTS (SELECT 1 FROM [dbo].[Version] WHERE [Version]=@version)
BEGIN
	INSERT INTO [dbo].[Version] ([Version], [Description])
	VALUES (@version, @description);
END

GO

UPDATE [dbo].[DataTypeMap]
  SET [IsNullable]=0
  WHERE [LanguageId]=(SELECT [Id] FROM [Enum].[Language] WHERE [Name]='c#') 
  AND [SqlType]='bit' AND [IsNullable]=1;

GO
PRINT N'Update complete.';


GO
