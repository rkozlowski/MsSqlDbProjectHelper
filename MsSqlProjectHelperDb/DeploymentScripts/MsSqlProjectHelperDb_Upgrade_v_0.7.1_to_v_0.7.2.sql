/*
Deployment script for MsSqlProjectHelperDb (Upgrade from v0.7.1 to v0.7.2)

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MsSqlProjectHelperDb"
:setvar DefaultFilePrefix "MsSqlProjectHelperDb"
:setvar DefaultDataPath "C:\MsSQL\Data\"
:setvar DefaultLogPath "C:\MsSQL\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- note: uncomment below line only for generating upgrade script (and make sure the versions in the script below and in the version script are set up correctly
USE [$(DatabaseName)];
GO
PRINT N'Checking database version before upgrade...';
DECLARE @expectedName VARCHAR(50) = 'MsSqlProjectHelperDb';
DECLARE @expectedVersion VARCHAR(50) = '0.7.1';
DECLARE @newVersion VARCHAR(50) = '0.7.2';
SET XACT_ABORT ON;
BEGIN TRY
	EXEC('DECLARE @name VARCHAR(50) = [DbInfo].[GetName](); DECLARE @ver VARCHAR(50) = [DbInfo].[GetCurrentVersion](); ')
END TRY
BEGIN CATCH
	PRINT N'An error occured.'
	PRINT N'Upgrade is not possible.';
	PRINT N'Check if you are executing this script against proper database.';
	PRINT N'Expected database type:    ' + @expectedName;
	PRINT N'Expected database version: ' + @expectedVersion;
	SET NOEXEC ON;
END CATCH
DECLARE @name VARCHAR(50) = [DbInfo].[GetName]();
DECLARE @currentVersion VARCHAR(50) = [DbInfo].[GetCurrentVersion]();

IF @name<>@expectedName
BEGIN	
	PRINT N'Expected database type: ' + @expectedName;
	PRINT N'Actual database type:   ' + ISNULL(@name, '<NULL>');
	PRINT N'Upgrade is not supported.';
	PRINT N'Check if you are executing this script against proper database.';
	SET NOEXEC ON;
END
IF @currentVersion<>@expectedVersion
BEGIN	
	PRINT N'Expected version of the database: ' + @expectedVersion;
	PRINT N'Actual version of the database:   ' + ISNULL(@currentVersion, '<NULL>');
	PRINT N'Upgrade is not supported.';
	PRINT N'Check if you are executing this script against proper database.';
	SET NOEXEC ON;
END
PRINT N'Upgrading database from version ' + @currentVersion + N' to version ' + @newVersion + N'...';
GO

GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Dropping Default Constraint [dbo].[DF_Project_GenEnumWrappersForAllTablesInEnumSchema]...';


GO
ALTER TABLE [dbo].[Project] DROP CONSTRAINT [DF_Project_GenEnumWrappersForAllTablesInEnumSchema];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Dropping Default Constraint [dbo].[DF_Project_GenStoredProcWrappersForAll]...';


GO
ALTER TABLE [dbo].[Project] DROP CONSTRAINT [DF_Project_GenStoredProcWrappersForAll];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering Table [dbo].[Project]...';


GO
ALTER TABLE [dbo].[Project] DROP COLUMN [EnumSchema], COLUMN [GenerateAllEnumWrappers], COLUMN [GenerateAllStoredProcWrappers], COLUMN [StoredProcSchema];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering View [View].[Project]...';


GO


ALTER VIEW [View].[Project]
AS
SELECT p.[Id], p.[Name], p.[NamespaceName], p.[ClassName], p.[ClassAccessId], ca.[Name] [ClassAccess], p.[LanguageId], l.[Name] AS [Language], 
    p.[LanguageOptions], [Internal].[GetLanguageOptionsString](p.[LanguageId], p.[LanguageOptions]) [LanguageOptionList], p.[ParamEnumMappingId], 
    m.[Name] [ParamEnumMapping], p.[MapResultSetEnums], p.[DefaultDatabase]
FROM [dbo].[Project] p
INNER JOIN [Enum].[ClassAccess] ca ON p.[ClassAccessId] = ca.[Id]
INNER JOIN [Enum].[Language] l ON p.[LanguageId] = l.Id 
INNER JOIN [Enum].[ParamEnumMapping] m ON p.[ParamEnumMappingId] = m.[Id];
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering Function [Internal].[IsNameMatch]...';


GO

ALTER FUNCTION [Internal].[IsNameMatch]
(
	@name NVARCHAR(128),
    @matchType TINYINT,
    @pattern NVARCHAR(200),
    @escChar NCHAR(1)
)
RETURNS BIT
AS
BEGIN
	
	DECLARE @result BIT = 0;

    DECLARE @NM_EXACT_MATCH TINYINT = 1;
    DECLARE @NM_PREFIX TINYINT = 2;
    DECLARE @NM_SUFFIX TINYINT = 3;
    DECLARE @NM_LIKE TINYINT = 4;
    DECLARE @NM_ANY TINYINT = 255;

    DECLARE @patternLen INT = LEN(@pattern);

    IF @matchType=@NM_EXACT_MATCH AND NULLIF(LTRIM(@pattern), N'') IS NOT NULL
    BEGIN
        SET @result = CASE WHEN @name=@pattern THEN 1 ELSE 0 END;
    END
    ELSE IF @matchType=@NM_PREFIX AND NULLIF(LTRIM(@pattern), N'') IS NOT NULL
    BEGIN
        SET @result = CASE WHEN LEFT(@name, @patternLen)=@pattern THEN 1 ELSE 0 END;
    END
    ELSE IF @matchType=@NM_SUFFIX AND NULLIF(LTRIM(@pattern), N'') IS NOT NULL
    BEGIN
        SET @result = CASE WHEN RIGHT(@name, @patternLen)=@pattern THEN 1 ELSE 0 END;
    END
    ELSE IF @matchType=@NM_LIKE AND NULLIF(LTRIM(@pattern), N'') IS NOT NULL
    BEGIN
        IF @escChar IS NOT NULL
        BEGIN
            SET @result = CASE WHEN @name LIKE @pattern ESCAPE @escChar THEN 1 ELSE 0 END;
        END
        ELSE
        BEGIN
            SET @result = CASE WHEN @name LIKE @pattern THEN 1 ELSE 0 END;
        END
    END
    ELSE IF @matchType=@NM_ANY
    BEGIN
        SET @result = 1;
    END
	
	RETURN @result;

END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GetStoredProcParams]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GetStoredProcParams]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GenerateEndCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GenerateEndCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GetTableTypeColumns]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GetTableTypeColumns]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GenerateTableTypeCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GenerateTableTypeCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GenerateStartCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GenerateStartCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GenerateResultTypeCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GenerateResultTypeCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GetStoredProcedures]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GetStoredProcedures]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GetEnums]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GetEnums]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GenerateStoredProcWrapperCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GenerateStoredProcWrapperCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GenerateEnumCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GenerateEnumCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Internal].[GetStoredProcResultSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[Internal].[GetStoredProcResultSet]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Project].[CreateProject]...';


GO
EXECUTE sp_refreshsqlmodule N'[Project].[CreateProject]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Project].[UpdateProject]...';


GO
EXECUTE sp_refreshsqlmodule N'[Project].[UpdateProject]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing Procedure [Project].[GenerateCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[Project].[GenerateCode]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
GO
/*
Post-Deployment Script							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- table [Enum].[Language]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[Language] WHERE [Id]=1) 
INSERT INTO [Enum].[Language] ([Id], [Name]) 
VALUES (1, N'c#');


-- table [Enum].[ClassAccess]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=1) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (1, N'public');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=2) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (2, N'protected');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=3) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (3, N'private');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=4) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (4, N'internal');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=5) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (5, N'protected internal');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ClassAccess] WHERE [Id]=6) 
INSERT INTO [Enum].[ClassAccess] ([Id], [Name]) 
VALUES (6, N'private protected');


-- table [Enum].[Casing]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=1) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (1, N'PascalCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=2) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (2, N'CamelCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=3) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (3, N'SnakeCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=4) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (4, N'UnderscoreCamelCase');

IF NOT EXISTS (SELECT 1 FROM [Enum].[Casing] WHERE [Id]=5) 
INSERT INTO [Enum].[Casing] ([Id], [Name]) 
VALUES (5, N'UpperSnakeCase');


-- table [Enum].[ParamEnumMapping]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=1) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (1, N'ExplicitOnly');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=2) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (2, N'EnumName');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=3) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (3, N'EnumNameWithId');

IF NOT EXISTS (SELECT 1 FROM [Enum].[ParamEnumMapping] WHERE [Id]=4) 
INSERT INTO [Enum].[ParamEnumMapping] ([Id], [Name]) 
VALUES (4, N'EnumNameWithOrWithoutId');


-- table [Enum].[TemplateType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=1) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (1, N'StartComment');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=2) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (2, N'End');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=3) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (3, N'EnumStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=4) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (4, N'EnumEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=5) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (5, N'EnumEntry');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=6) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (6, N'ResultTypeStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=7) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (7, N'ResultTypeEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=8) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (8, N'ResultTypeProperty');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=10) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (10, N'WrapperStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=11) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (11, N'WrapperEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=12) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (12, N'WrapperPrep');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=13) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (13, N'WrapperExec');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=14) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (14, N'WrapperParam');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=15) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (15, N'WrapperParamPreExecInput');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=16) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (16, N'WrapperParamPreExecOutput');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=17) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (17, N'WrapperExecRS');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=19) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (19, N'WrapperParamPostExec');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=20) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (20, N'WrapperStart2');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=21) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (21, N'WrapperReturnParam');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=22) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (22, N'WrapperEnd2');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=23) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (23, N'WrapperReturnParamDec');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=24) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (24, N'TableTypeStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=25) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (25, N'TableTypeEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=26) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (26, N'TableTypeProperty');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=27) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (27, N'WrapperParamPreExecTableType');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=28) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (28, N'TableTypeDtStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=29) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (29, N'TableTypeDtEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=30) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (30, N'TableTypeDtColumn');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=31) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (31, N'TableTypeDtRowsStart');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=32) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (32, N'TableTypeDtRowsEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=33) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (33, N'TableTypeDtRow');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=34) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (34, N'TableTypeDtColumnAdd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=35) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (35, N'TableTypeDtColumnMaxLen');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=36) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (36, N'TableTypeDtRowNull');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=37) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (37, N'StartUsing');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=38) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (38, N'StartClass');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=39) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (39, N'StartCommentTool');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=40) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (40, N'StartCommentEnv');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=41) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (41, N'StartCommentEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=42) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (42, N'StaticCtorEnd');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=43) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (43, N'RsMappingSetup');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=44) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (44, N'TableTypeDtColumnIdentity');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=45) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (45, N'TableTypeDtColumnPrecisionScale');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=46) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (46, N'WrapperExecRsRv');

IF NOT EXISTS (SELECT 1 FROM [Enum].[TemplateType] WHERE [Id]=47) 
INSERT INTO [Enum].[TemplateType] ([Id], [Name]) 
VALUES (47, N'EnumStartFlag');


-- table [Enum].[NameType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=1) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (1, N'Class');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=2) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (2, N'Method');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=3) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (3, N'Property');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=4) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (4, N'Field');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=5) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (5, N'Parameter');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=6) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (6, N'LocalVariable');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=7) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (7, N'TupleField');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=8) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (8, N'Enum');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameType] WHERE [Id]=9) 
INSERT INTO [Enum].[NameType] ([Id], [Name]) 
VALUES (9, N'EnumMember');


-- table [Flag].[CodeGenOption]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=0) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (0, N'None', 0);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=1) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (1, N'GenEnums', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=2) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (2, N'GenResultTypes', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=4) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (4, N'GenTvpTypes', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=8) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (8, N'GenSpWrappers', 1);

IF NOT EXISTS (SELECT 1 FROM [Flag].[CodeGenOption] WHERE [Value]=32767) 
INSERT INTO [Flag].[CodeGenOption] ([Value], [Name], [IsSingleBit]) 
VALUES (32767, N'GenAll', 0);


-- table: [dbo].[DataTypeMap]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'tinyint') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'tinyint', N'byte', N'SqlDbType.TinyInt', N'DbType.Byte', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'smallint') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'smallint', N'short', N'SqlDbType.SmallInt', N'DbType.Int16', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'int') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'int', N'int', N'SqlDbType.Int', N'DbType.Int32', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'bigint') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'bigint', N'long', N'SqlDbType.BigInt', N'DbType.Int64', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'varchar') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'varchar', N'string', N'SqlDbType.VarChar', N'DbType.AnsiString', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'char') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'char', N'string', N'SqlDbType.Char', N'DbType.AnsiStringFixedLength', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'nvarchar') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'nvarchar', N'string', N'SqlDbType.NVarChar', N'DbType.String', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'nchar') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'nchar', N'string', N'SqlDbType.NChar', N'DbType.StringFixedLength', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'date') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'date', N'DateOnly', N'SqlDbType.Date', N'DbType.Date', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'time') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'time', N'TimeOnly', N'SqlDbType.Time', N'DbType.Time', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'datetime2') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'datetime2', N'DateTime', N'SqlDbType.DateTime2', N'DbType.DateTime2', 0, 0, 0, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'datetimeoffset') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'datetimeoffset', N'DateTimeOffset', N'SqlDbType.DateTimeOffset', N'DbType.DateTimeOffset', 0, 0, 0, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'smalldatetime') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'smalldatetime', N'DateTime', N'SqlDbType.DateTime', N'DbType.DateTime', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'datetime') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'datetime', N'DateTime', N'SqlDbType.DateTime', N'DbType.DateTime', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'real') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'real', N'float', N'SqlDbType.Real', N'DbType.Single', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'float') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'float', N'double', N'SqlDbType.Float', N'DbType.Double', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'money') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'money', N'decimal', N'SqlDbType.Money', N'DbType.Decimal', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'decimal') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'decimal', N'decimal', N'SqlDbType.Decimal', N'DbType.Decimal', 0, 0, 1, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'numeric') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'numeric', N'decimal', N'SqlDbType.Decimal', N'DbType.Decimal', 0, 0, 1, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'smallmoney') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'smallmoney', N'decimal', N'SqlDbType.SmallMoney', N'DbType.Decimal', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'bit') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'bit', N'bool', N'SqlDbType.Bit', N'DbType.Boolean', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'varbinary') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'varbinary', N'byte[]', N'SqlDbType.VarBinary', N'DbType.Binary', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'binary') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'binary', N'byte[]', N'SqlDbType.VarBinary', N'DbType.Binary', 1, 1, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'uniqueidentifier') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'uniqueidentifier', N'Guid', N'SqlDbType.UniqueIdentifier', N'DbType.Guid', 0, 0, 0, 0);

IF NOT EXISTS (SELECT 1 FROM [dbo].[DataTypeMap] WHERE [LanguageId]=1 AND [SqlType]=N'sql_variant') 
INSERT INTO [dbo].[DataTypeMap] ([LanguageId], [SqlType], [NativeType], [SqlDbType], [DbType], [IsNullable], [SizeNeeded], [PrecisionNeeded], [ScaleNeeded]) 
VALUES (1, N'sql_variant', N'object', N'SqlDbType.Variant', N'DbType.Object', 1, 0, 0, 0);


-- table: [dbo].[LanguageNameCasing]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=1) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 1, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=2) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 2, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=3) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 3, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=4) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 4, 2);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=5) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 5, 2);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=6) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 6, 2);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=7) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 7, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=8) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 8, 1);

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageNameCasing] WHERE [LanguageId]=1 AND [NameTypeId]=9) 
INSERT INTO [dbo].[LanguageNameCasing] ([LanguageId], [NameTypeId], [CasingId]) 
VALUES (1, 9, 1);


-- table [Enum].[NameMatch]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Enum].[NameMatch] WHERE [Id]=1) 
INSERT INTO [Enum].[NameMatch] ([Id], [Name]) 
VALUES (1, N'ExactMatch');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameMatch] WHERE [Id]=2) 
INSERT INTO [Enum].[NameMatch] ([Id], [Name]) 
VALUES (2, N'Prefix');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameMatch] WHERE [Id]=3) 
INSERT INTO [Enum].[NameMatch] ([Id], [Name]) 
VALUES (3, N'Suffix');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameMatch] WHERE [Id]=4) 
INSERT INTO [Enum].[NameMatch] ([Id], [Name]) 
VALUES (4, N'Like');

IF NOT EXISTS (SELECT 1 FROM [Enum].[NameMatch] WHERE [Id]=255) 
INSERT INTO [Enum].[NameMatch] ([Id], [Name]) 
VALUES (255, N'Any');



-- Completion time: 2024-03-19T20:07:17.1809278+00:00


IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId] IS NULL AND [Name]='GenerateStaticClass')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (NULL, 'GenerateStaticClass', 0x0000000000000001);
END

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId] IS NULL AND [Name]='TreatOutputParamsAsInputOutput')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (NULL, 'TreatOutputParamsAsInputOutput', 0x0000000000000002);
END


IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId] IS NULL AND [Name]='CaptureReturnValueForResultSetStoredProcedures')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (NULL, 'CaptureReturnValueForResultSetStoredProcedures', 0x0000000000000004);
END

DECLARE @langId TINYINT = (SELECT [Id] FROM [Enum].[Language] WHERE [Name]='c#');

IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId]=@langId AND [Name]='TargetClassicDotNet')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (@langId, 'TargetClassicDotNet', 0x0000000000010000);
END


IF NOT EXISTS (SELECT 1 FROM [dbo].[LanguageOption] WHERE [LanguageId]=@langId AND [Name]='UseSyncWrappers')
BEGIN
	INSERT INTO [dbo].[LanguageOption] ([LanguageId], [Name], [Value])
	VALUES (@langId, 'UseSyncWrappers', 0x0000000000020000);
END





DROP TABLE IF EXISTS #Template;
GO

CREATE TABLE #Template
(
    [Id] [smallint] IDENTITY(1,1) NOT NULL PRIMARY KEY,
    [LanguageId] [tinyint] NOT NULL,
    [TypeId] [tinyint] NOT NULL,
    [LanguageOptions] BIGINT NOT NULL DEFAULT(0),
    [Template] [nvarchar](4000) NOT NULL,
    UNIQUE ([LanguageId], [TypeId], [LanguageOptions])
);
GO

DECLARE @langId TINYINT = (SELECT [Id] FROM [Enum].[Language] WHERE [Name] = 'c#');

DECLARE @TT_START_COMMENT TINYINT = 1;
DECLARE @TT_END TINYINT = 2;
DECLARE @TT_ENUM_START TINYINT = 3;
DECLARE @TT_ENUM_END TINYINT = 4;
DECLARE @TT_ENUM_ENTRY TINYINT = 5;
DECLARE @TT_RESULT_TYPE_START TINYINT = 6;
DECLARE @TT_RESULT_TYPE_END TINYINT = 7;
DECLARE @TT_RESULT_TYPE_PROPERTY TINYINT = 8;
DECLARE @TT_WRAPPER_START TINYINT = 10;
DECLARE @TT_WRAPPER_END TINYINT = 11;
DECLARE @TT_WRAPPER_PREP TINYINT = 12;
DECLARE @TT_WRAPPER_EXEC TINYINT = 13;
DECLARE @TT_WRAPPER_PARAM TINYINT = 14;
DECLARE @TT_WRAPPER_PARAM_PRE_EXEC_INPUT TINYINT = 15;
DECLARE @TT_WRAPPER_PARAM_PRE_EXEC_OUTPUT TINYINT = 16;
DECLARE @TT_WRAPPER_EXEC_RS TINYINT = 17;
DECLARE @TT_WRAPPER_PARAM_POST_EXEC TINYINT = 19;
DECLARE @TT_WRAPPER_START2 TINYINT = 20;
DECLARE @TT_WRAPPER_RETURN_PARAM TINYINT = 21;
DECLARE @TT_WRAPPER_END2 TINYINT = 22;
DECLARE @TT_WRAPPER_RETURN_PARAM_DEC TINYINT = 23;
DECLARE @TT_TABLE_TYPE_START TINYINT = 24;
DECLARE @TT_TABLE_TYPE_END TINYINT = 25;
DECLARE @TT_TABLE_TYPE_PROPERTY TINYINT = 26;
DECLARE @TT_WRAPPER_PARAM_PRE_EXEC_TABLE_TYPE TINYINT = 27;
DECLARE @TT_TABLE_TYPE_DT_START TINYINT = 28;
DECLARE @TT_TABLE_TYPE_DT_END TINYINT = 29;
DECLARE @TT_TABLE_TYPE_DT_COLUMN TINYINT = 30;
DECLARE @TT_TABLE_TYPE_DT_ROWS_START TINYINT = 31;
DECLARE @TT_TABLE_TYPE_DT_ROWS_END TINYINT = 32;
DECLARE @TT_TABLE_TYPE_DT_ROW TINYINT = 33;
DECLARE @TT_TABLE_TYPE_DT_COLUMN_ADD TINYINT = 34;
DECLARE @TT_TABLE_TYPE_DT_COLUMN_MAX_LEN TINYINT = 35;
DECLARE @TT_TABLE_TYPE_DT_ROW_NULL TINYINT = 36;
DECLARE @TT_START_USING TINYINT = 37;
DECLARE @TT_START_CLASS TINYINT = 38;
DECLARE @TT_START_COMMENT_TOOL TINYINT = 39;
DECLARE @TT_START_COMMENT_ENV TINYINT = 40;
DECLARE @TT_START_COMMENT_END TINYINT = 41;
DECLARE @TT_STATIC_CTOR_END TINYINT = 42;
DECLARE @TT_RS_MAPPING_SETUP TINYINT = 43;
DECLARE @TT_TABLE_TYPE_DT_COLUMN_IDENTITY TINYINT = 44;
DECLARE @TT_TABLE_TYPE_DT_COLUMN_PRECISION_SCALE TINYINT = 45;
DECLARE @TT_WRAPPER_EXEC_RS_RV TINYINT = 46;
DECLARE @TT_ENUM_START_FLAG TINYINT = 47;

DECLARE @LO_GENERATE_STATIC_CLASS BIGINT = 1;
DECLARE @LO_TREAT_OUTPUT_PARAMS_AS_INPUT_OUTPUT BIGINT = 2;
DECLARE @LO_CAPTURE_RETURN_VALUE_FOR_RESULT_SET_STORED_PROCEDURES BIGINT = 4;
DECLARE @LO_TARGET_CLASSIC_DOT_NET BIGINT = 65536;
DECLARE @LO_USE_SYNC_WRAPPERS BIGINT = 131072;

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT, 
N'// <auto-generated>
//     This code was generated by a tool.
//
//     Project name:    @{ProjectName}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT_ENV, 
N'//     Source database: @{Database}
//     Source server:   @{ServerName}
//     Source instance: @{InstanceName}
//     Database user:   @{DbUser}
//     Timestamp:       @{Timestamp}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT_TOOL, 
N'//     Tool name:       @{ToolName}
//     Tool database:   @{ToolDatabase}
//     Tool version:    @{ToolVersion}
//     Tool URL:        @{ToolUrl}');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_COMMENT_END, 
N'//
//     Changes to this file may cause incorrect behavior 
//     and will be lost if the code is regenerated.
// </auto-generated>
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_USING,
N'using System.Data;
using System.Data.Common;
using Microsoft.Data.SqlClient;
using Microsoft.Data.SqlClient.Server;
using Dapper;
');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_START_USING, @LO_TARGET_CLASSIC_DOT_NET,
N'using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.SqlServer.Server;
using Dapper;
');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_START_USING, @LO_TARGET_CLASSIC_DOT_NET | @LO_USE_SYNC_WRAPPERS,
N'using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using Microsoft.SqlServer.Server;
using Dapper;
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_START_CLASS,
N'namespace @{NamespaceName}
{
    @{ClassAccess} partial class @{ClassName}
    {
        public string ConnectionString { get; set; }

        public int DefaultCommandTimeoutSec { get; set; } = 30;
        
        public @{ClassName}(string connectionString = null)
        {
            ConnectionString = connectionString;
        }

        protected virtual DbConnection GetDbConnection()
        {
            return new SqlConnection(ConnectionString);
        }

        [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]
        public class ColumnAttribute : Attribute
        {
            public string Name { get; set; }
        }

        static @{ClassName}()
        {
');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_START_CLASS, @LO_GENERATE_STATIC_CLASS,
N'namespace @{NamespaceName}
{
    @{ClassAccess} static partial class @{ClassName}
    {
        public static string ConnectionString { get; set; }

        public static int DefaultCommandTimeoutSec { get; set; } = 30;
        
        private static DbConnection GetDbConnection()
        {
            return new SqlConnection(ConnectionString);
        }

        [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]
        public class ColumnAttribute : Attribute
        {
            public string Name { get; set; }
        }
        
        static @{ClassName}()
        {
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_STATIC_CTOR_END, 
N'        }
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RS_MAPPING_SETUP, 
N'            SqlMapper.SetTypeMap(
                typeof(@{RsType}),
                new CustomPropertyTypeMap(
                    typeof(@{RsType}),
                    (type, columnName) =>
                        type.GetProperties().FirstOrDefault(prop =>
                            prop.GetCustomAttributes(false)
                                .OfType<ColumnAttribute>()
                                .Any(attr => attr.Name == columnName))));
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_END, 
N'
    }
}
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_START, 
N'
        // Source table: @{EnumSchema}.@{EnumTable}
        @{EnumAccess} enum @{EnumName}
        {');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_START_FLAG, 
N'
        // Source table: @{EnumSchema}.@{EnumTable}
        [Flag]
        @{EnumAccess} enum @{EnumName}
        {');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_END, 
N'        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_ENUM_ENTRY, N'            @{Name} = @{Value}@{Sep}');





INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RESULT_TYPE_START, 
N'
        // Result type for a stored procedure: @{SpSchema}.@{SpName}
        @{ClassAccess} partial class @{ClassName}
        {');




INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RESULT_TYPE_END, 
N'        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_RESULT_TYPE_PROPERTY, 
N'            [Column(Name="@{ColumnName}")]
            @{PropertyAccess} @{Type} @{Name} { get; set; }');




INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_START, 
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} async Task<@{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START, @LO_GENERATE_STATIC_CLASS,
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} static async Task<@{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START, @LO_USE_SYNC_WRAPPERS,
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} @{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START, @LO_GENERATE_STATIC_CLASS | @LO_USE_SYNC_WRAPPERS,
N'
        // Wrapper method for a stored procedure: @{SpSchema}.@{SpName}
        @{MethodAccess} static @{TupleStart}
            @{ResultType}@{ResultVarNameTuple}@{Sep}');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_START2, 
N'        @{TupleEnd}> @{WrapperName}Async(');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_START2, @LO_USE_SYNC_WRAPPERS,
N'        @{TupleEnd} @{WrapperName}(');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PREP, N'        )
        {
            @{ResultType} @{ResultVarName};
            var p = new DynamicParameters();
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC, N'            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();
                await connection.ExecuteAsync("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);
                connection.Close();
            }
            @{ResultVarName} = p.Get<@{ResultType}>("@returnValue");
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC_RS, N'
            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();

                var queryResult = await connection.QueryAsync<@{ResultTypeSingle}>("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);

                connection.Close();
                @{ResultVarName} = queryResult.ToList();
            }
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC_RS_RV, N'            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);

            using (var connection = GetDbConnection())
            {
                await connection.OpenAsync();

                var queryResult = await connection.QueryAsync<@{ResultTypeSingle}>("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);

                connection.Close();
                @{ResultVarName} = queryResult.ToList();
            }
            var @{RetValVarName} = p.Get<int>("@returnValue");
');



INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC, @LO_USE_SYNC_WRAPPERS, 
N'            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            
            using (var connection = GetDbConnection())
            {
                connection.Open();
                connection.Execute("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);
                connection.Close();
            }
            @{ResultVarName} = p.Get<@{ResultType}>("@returnValue");
');


INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC_RS, @LO_USE_SYNC_WRAPPERS,
N'
            using (var connection = GetDbConnection())
            {
                connection.Open();

                var queryResult = connection.Query<@{ResultTypeSingle}>("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);

                connection.Close();
                @{ResultVarName} = queryResult.ToList();
            }
');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_EXEC_RS_RV, @LO_USE_SYNC_WRAPPERS,
N'            p.Add("@returnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);
            using (var connection = GetDbConnection())
            {
                connection.Open();

                var queryResult = connection.Query<@{ResultTypeSingle}>("@{SpSchema}.@{SpName}", p, commandTimeout: DefaultCommandTimeoutSec, commandType: CommandType.StoredProcedure);

                connection.Close();
                @{ResultVarName} = queryResult.ToList();
            }
            var @{RetValVarName} = p.Get<int>("@returnValue");
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_END, 
N'            return @{TupleStart}
                @{ResultVarName}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_END2, 
N'            @{TupleEnd};
        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM, N'            @{Type} @{ParamName}@{Sep}');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_RETURN_PARAM, N'                @{ParamName}@{Sep}');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_RETURN_PARAM_DEC, N'            @{Type} @{ParamName}@{Sep}');



INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_INPUT, N'            p.Add("@{Name}", @{TypeCast}@{ParamName});');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_OUTPUT, N'            p.Add("@{Name}", null, @{DbType}, ParameterDirection.Output, @{Size}, @{Precision}, @{Scale});');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_OUTPUT, @LO_TREAT_OUTPUT_PARAMS_AS_INPUT_OUTPUT, 
N'            p.Add("@{Name}", @{ParamName}, @{DbType}, ParameterDirection.InputOutput, @{Size}, @{Precision}, @{Scale});');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_PRE_EXEC_TABLE_TYPE, N'
            var @{DtName} = @{TableType}.ToSqlDataRecords(@{ParamName});            
            p.Add("@{Name}", @{DtName}.AsTableValuedParameter("@{TvpName}"));
            ');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_POST_EXEC, N'            var @{ParamName} = @{TypeCast}p.Get<@{Type}>("@{Name}");');

INSERT INTO #Template
([LanguageId], [TypeId], [LanguageOptions], [Template])
VALUES
(@langId, @TT_WRAPPER_PARAM_POST_EXEC, @LO_TREAT_OUTPUT_PARAMS_AS_INPUT_OUTPUT, N'            @{ParamName} = @{TypeCast}p.Get<@{Type}>("@{Name}");');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_START, 
N'
        // Table type: @{TtSchema}.@{TtName}
        @{ClassAccess} partial class @{ClassName}
        {');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_END, 
N'        }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_PROPERTY, N'            @{PropertyAccess} @{Type} @{Name} { get; set; }');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_START, 
N'
            public static IEnumerable<SqlDataRecord> ToSqlDataRecords(IEnumerable<@{ClassName}> records)        
            {
                var table = new List<SqlDataRecord>();
                var columns = new SqlMetaData[@{NumberOfColumns}];                
                SqlMetaData column;
                SqlDataRecord row;
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_END, 
N'                return table;
            }
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN, 
N'                column = new SqlMetaData("@{ColumnName}", @{SqlDbType});');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN_MAX_LEN, 
N'                column = new SqlMetaData("@{ColumnName}", @{SqlDbType}, @{MaxLength});');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN_IDENTITY, 
N'                column = new SqlMetaData("@{ColumnName}", @{SqlDbType}, true, false, SortOrder.Unspecified, -1);');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN_PRECISION_SCALE, 
N'                column = new SqlMetaData("@{ColumnName}", @{SqlDbType}, @{Precision}, @{Scale});');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_COLUMN_ADD, 
N'                columns[@{ColumnNumber}] = column;
');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROWS_START, 
N'                foreach (var record in records)
                {
                    row = new SqlDataRecord(columns);');


INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROWS_END, 
N'                    table.Add(row);  
                }
');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROW, 
N'                row.SetValue(@{ColumnNumber}, @{Cast}record.@{Name});');

INSERT INTO #Template
([LanguageId], [TypeId], [Template])
VALUES
(@langId, @TT_TABLE_TYPE_DT_ROW_NULL, 
N'                row.SetValue(@{ColumnNumber}, (object)(@{Cast}record.@{Name}) ?? DBNull.Value);');


GO



UPDATE xt
SET xt.[Template]=t.[Template]
FROM #Template t
JOIN [dbo].[Template] xt ON t.[LanguageId]=xt.[LanguageId] AND  t.[TypeId]=xt.[TypeId] AND t.[LanguageOptions]=xt.[LanguageOptions]

GO

INSERT INTO [dbo].[Template]
([LanguageId], [TypeId], [LanguageOptions], [Template])
SELECT 
t.[LanguageId], t.[TypeId], t.[LanguageOptions], t.[Template]
FROM #Template t
LEFT JOIN [dbo].[Template] xt ON t.[LanguageId]=xt.[LanguageId] AND  t.[TypeId]=xt.[TypeId] AND t.[LanguageOptions]=xt.[LanguageOptions]
WHERE xt.[Id] IS NULL;
GO

DROP TABLE IF EXISTS #Template;
GO


--table [ParserEnum].[TSqlSequenceType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (1, N'Normal');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (2, N'AnyStatement');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (3, N'BlockStatement');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (4, N'SequenceOfStatements');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (5, N'TwoPartIdentifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=6) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (6, N'ThreePartIdentifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=7) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (7, N'MoreTokens');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=8) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (8, N'Label');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=9) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (9, N'BeginBlock');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=10) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (10, N'EndBlock');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=11) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (11, N'SequenceInParentheses');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=12) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (12, N'FourPartIdentifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=13) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (13, N'ScalarExpression');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=14) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (14, N'OutputClause');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=15) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (15, N'CaseExpression');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=16) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (16, N'VarAssign');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=17) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (17, N'SpNumber');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSequenceType] WHERE [Id]=18) 
INSERT INTO [ParserEnum].[TSqlSequenceType] ([Id], [Name]) 
VALUES (18, N'IdentifierDot');


--table [ParserEnum].[TSqlBlockType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlBlockType] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TSqlBlockType] ([Id], [Name]) 
VALUES (1, N'RegularBlock');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlBlockType] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TSqlBlockType] ([Id], [Name]) 
VALUES (2, N'TryBlock');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlBlockType] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TSqlBlockType] ([Id], [Name]) 
VALUES (3, N'CatchBlock');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlBlockType] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TSqlBlockType] ([Id], [Name]) 
VALUES (4, N'AtomicBlock');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlBlockType] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[TSqlBlockType] ([Id], [Name]) 
VALUES (5, N'CaseBlock');


--table [ParserEnum].[TSqlStatementPart]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlStatementPart] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TSqlStatementPart] ([Id], [Name]) 
VALUES (1, N'Identifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlStatementPart] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TSqlStatementPart] ([Id], [Name]) 
VALUES (2, N'StartOfParameterList');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlStatementPart] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TSqlStatementPart] ([Id], [Name]) 
VALUES (3, N'Definition');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlStatementPart] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TSqlStatementPart] ([Id], [Name]) 
VALUES (4, N'ChildStatement');


--table [ParserEnum].[TokenType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=0) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (0, N'None');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (1, N'Whitespace');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (2, N'Comment');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (3, N'Identifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (4, N'Keyword');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (5, N'Delimiter');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=6) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (6, N'Separator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=7) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (7, N'Operator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=8) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (8, N'Literal');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenType] WHERE [Id]=255) 
INSERT INTO [ParserEnum].[TokenType] ([Id], [Name]) 
VALUES (255, N'Unknown');


--table [ParserEnum].[TSqlKeyword]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (1, N'ADD');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (2, N'ALL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (3, N'ALTER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (4, N'AND');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (5, N'ANY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=6) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (6, N'AS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=7) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (7, N'ASC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=8) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (8, N'AUTHORIZATION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=9) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (9, N'BACKUP');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=10) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (10, N'BEGIN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=11) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (11, N'BETWEEN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=12) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (12, N'BREAK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=13) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (13, N'BROWSE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=14) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (14, N'BULK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=15) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (15, N'BY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=16) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (16, N'CASCADE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=17) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (17, N'CASE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=18) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (18, N'CHECK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=19) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (19, N'CHECKPOINT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=20) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (20, N'CLOSE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=21) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (21, N'CLUSTERED');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=22) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (22, N'COALESCE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=23) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (23, N'COLLATE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=24) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (24, N'COLUMN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=25) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (25, N'COMMIT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=26) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (26, N'COMPUTE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=27) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (27, N'CONSTRAINT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=28) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (28, N'CONTAINS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=29) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (29, N'CONTAINSTABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=30) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (30, N'CONTINUE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=31) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (31, N'CONVERT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=32) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (32, N'CREATE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=33) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (33, N'CROSS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=34) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (34, N'CURRENT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=35) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (35, N'CURRENT_DATE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=36) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (36, N'CURRENT_TIME');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=37) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (37, N'CURRENT_TIMESTAMP');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=38) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (38, N'CURRENT_USER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=39) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (39, N'CURSOR');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=40) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (40, N'DATABASE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=41) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (41, N'DBCC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=42) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (42, N'DEALLOCATE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=43) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (43, N'DECLARE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=44) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (44, N'DEFAULT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=45) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (45, N'DELETE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=46) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (46, N'DENY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=47) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (47, N'DESC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=48) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (48, N'DISK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=49) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (49, N'DISTINCT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=50) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (50, N'DISTRIBUTED');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=51) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (51, N'DOUBLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=52) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (52, N'DROP');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=53) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (53, N'DUMP');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=54) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (54, N'ELSE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=55) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (55, N'END');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=56) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (56, N'ERRLVL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=57) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (57, N'ESCAPE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=58) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (58, N'EXCEPT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=59) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (59, N'EXEC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=60) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (60, N'EXECUTE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=61) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (61, N'EXISTS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=62) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (62, N'EXIT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=63) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (63, N'EXTERNAL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=64) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (64, N'FETCH');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=65) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (65, N'FILE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=66) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (66, N'FILLFACTOR');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=67) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (67, N'FOR');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=68) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (68, N'FOREIGN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=69) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (69, N'FREETEXT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=70) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (70, N'FREETEXTTABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=71) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (71, N'FROM');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=72) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (72, N'FULL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=73) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (73, N'FUNCTION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=74) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (74, N'GOTO');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=75) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (75, N'GRANT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=76) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (76, N'GROUP');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=77) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (77, N'HAVING');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=78) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (78, N'HOLDLOCK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=79) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (79, N'IDENTITY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=80) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (80, N'IDENTITY_INSERT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=81) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (81, N'IDENTITYCOL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=82) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (82, N'IF');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=83) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (83, N'IN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=84) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (84, N'INDEX');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=85) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (85, N'INNER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=86) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (86, N'INSERT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=87) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (87, N'INTERSECT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=88) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (88, N'INTO');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=89) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (89, N'IS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=90) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (90, N'JOIN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=91) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (91, N'KEY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=92) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (92, N'KILL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=93) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (93, N'LEFT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=94) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (94, N'LIKE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=95) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (95, N'LINENO');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=96) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (96, N'LOAD');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=97) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (97, N'MERGE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=98) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (98, N'NATIONAL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=99) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (99, N'NOCHECK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=100) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (100, N'NONCLUSTERED');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=101) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (101, N'NOT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=102) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (102, N'NULL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=103) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (103, N'NULLIF');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=104) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (104, N'OF');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=105) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (105, N'OFF');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=106) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (106, N'OFFSETS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=107) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (107, N'ON');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=108) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (108, N'OPEN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=109) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (109, N'OPENDATASOURCE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=110) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (110, N'OPENQUERY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=111) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (111, N'OPENROWSET');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=112) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (112, N'OPENXML');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=113) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (113, N'OPTION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=114) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (114, N'OR');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=115) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (115, N'ORDER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=116) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (116, N'OUTER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=117) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (117, N'OVER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=118) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (118, N'PERCENT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=119) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (119, N'PIVOT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=120) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (120, N'PLAN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=121) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (121, N'PRECISION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=122) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (122, N'PRIMARY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=123) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (123, N'PRINT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=124) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (124, N'PROC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=125) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (125, N'PROCEDURE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=126) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (126, N'PUBLIC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=127) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (127, N'RAISERROR');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=128) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (128, N'READ');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=129) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (129, N'READTEXT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=130) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (130, N'RECONFIGURE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=131) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (131, N'REFERENCES');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=132) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (132, N'REPLICATION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=133) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (133, N'RESTORE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=134) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (134, N'RESTRICT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=135) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (135, N'RETURN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=136) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (136, N'REVERT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=137) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (137, N'REVOKE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=138) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (138, N'RIGHT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=139) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (139, N'ROLLBACK');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=140) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (140, N'ROWCOUNT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=141) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (141, N'ROWGUIDCOL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=142) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (142, N'RULE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=143) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (143, N'SAVE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=144) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (144, N'SCHEMA');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=145) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (145, N'SECURITYAUDIT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=146) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (146, N'SELECT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=147) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (147, N'SEMANTICKEYPHRASETABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=148) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (148, N'SEMANTICSIMILARITYDETAILSTABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=149) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (149, N'SEMANTICSIMILARITYTABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=150) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (150, N'SESSION_USER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=151) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (151, N'SET');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=152) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (152, N'SETUSER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=153) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (153, N'SHUTDOWN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=154) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (154, N'SOME');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=155) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (155, N'STATISTICS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=156) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (156, N'SYSTEM_USER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=157) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (157, N'TABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=158) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (158, N'TABLESAMPLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=159) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (159, N'TEXTSIZE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=160) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (160, N'THEN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=161) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (161, N'TO');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=162) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (162, N'TOP');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=163) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (163, N'TRAN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=164) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (164, N'TRANSACTION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=165) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (165, N'TRIGGER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=166) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (166, N'TRUNCATE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=167) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (167, N'TRY_CONVERT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=168) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (168, N'TSEQUAL');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=169) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (169, N'UNION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=170) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (170, N'UNIQUE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=171) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (171, N'UNPIVOT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=172) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (172, N'UPDATE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=173) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (173, N'UPDATETEXT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=174) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (174, N'USE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=175) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (175, N'USER');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=176) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (176, N'VALUES');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=177) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (177, N'VARYING');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=178) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (178, N'VIEW');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=179) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (179, N'WAITFOR');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=180) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (180, N'WHEN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=181) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (181, N'WHERE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=182) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (182, N'WHILE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=183) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (183, N'WITH');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=184) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (184, N'WITHIN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=185) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (185, N'WRITETEXT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=186) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (186, N'ATOMIC');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=187) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (187, N'CONVERSATION');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=188) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (188, N'DIALOG');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=189) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (189, N'CATCH');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=190) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (190, N'TRY');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=191) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (191, N'THROW');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=192) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (192, N'FILETABLE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=193) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (193, N'OUTPUT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=194) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (194, N'LOGIN');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=195) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (195, N'AT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=196) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (196, N'DATA_SOURCE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=197) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (197, N'RECOMPILE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=198) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (198, N'RESULT');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=199) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (199, N'SETS');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=200) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (200, N'UNDEFINED');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=201) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (201, N'NONE');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlKeyword] WHERE [Id]=32767) 
INSERT INTO [ParserEnum].[TSqlKeyword] ([Id], [Name]) 
VALUES (32767, N'<MORE_THAN_ONE>');


--table [ParserEnum].[CharType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=0) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (0, N'Unknown');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (1, N'Letter');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (2, N'UnicodeLetter');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (3, N'Digit');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (4, N'UnicodeDigit');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (5, N'Operator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=6) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (6, N'Separator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=7) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (7, N'Delimiter');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=8) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (8, N'Special');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[CharType] WHERE [Id]=9) 
INSERT INTO [ParserEnum].[CharType] ([Id], [Name]) 
VALUES (9, N'Whitespace');


--table [ParserEnum].[TSqlSeqElementType]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (1, N'Keyword');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (2, N'Identifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (3, N'Operator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (4, N'Separator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (5, N'Delimiter');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=6) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (6, N'Statement');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=7) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (7, N'SequenceOfStatements');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=8) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (8, N'Block');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=9) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (9, N'LiteralString');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=10) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (10, N'Sequence');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=11) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (11, N'End');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=12) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (12, N'LiteralInt');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=13) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (13, N'VariableName');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=14) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (14, N'SpecialSequence');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TSqlSeqElementType] WHERE [Id]=15) 
INSERT INTO [ParserEnum].[TSqlSeqElementType] ([Id], [Name]) 
VALUES (15, N'Literal');


--table [ParserEnum].[TokenSubtype]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=1) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (1, 2, N'SingleLineComment');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=2) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (2, 2, N'MultiLineComment');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=3) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (3, 3, N'RegularIdentifier');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=4) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (4, 3, N'IdentifierInBrackets');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=5) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (5, 3, N'IdentifierInDoubleQuotes');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=6) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (6, 8, N'String');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=7) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (7, 8, N'UnicodeString');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=8) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (8, 8, N'Integer');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=9) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (9, 8, N'Decimal');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=10) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (10, 8, N'Money');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=11) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (11, 8, N'Real');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=12) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (12, 8, N'Binary');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=13) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (13, 6, N'Comma');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=14) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (14, 6, N'Semicolon');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=15) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (15, 6, N'Period');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=16) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (16, 4, N'VariableName');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=17) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (17, 7, N'UnaryOperator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=18) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (18, 7, N'BinaryOperator');

IF NOT EXISTS (SELECT 1 FROM [ParserEnum].[TokenSubtype] WHERE [Id]=19) 
INSERT INTO [ParserEnum].[TokenSubtype] ([Id], [TypeId], [Name]) 
VALUES (19, 7, N'UnaryOrBinaryOperator');


--table [Parser].[Operator]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=1) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (1, 'BT_NOT', '~', 1, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=2) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (2, 'MUL', '*', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=3) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (3, 'DIV', '/', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=4) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (4, 'MOD', '%', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=5) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (5, 'ADD', '+', 1, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=6) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (6, 'SUB', '-', 1, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=7) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (7, 'BT_AND', '&', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=8) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (8, 'BT_XOR', '^', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=9) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (9, 'BT_OR', '|', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=10) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (10, 'EQ', '=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=11) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (11, 'GT', '>', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=12) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (12, 'LT', '<', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=13) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (13, 'GE', '>=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=14) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (14, 'LE', '<=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=15) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (15, 'NE', '<>', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=16) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (16, 'NE2', '!=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=17) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (17, 'NGT', '!>', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=18) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (18, 'NLT', '!<', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=19) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (19, 'ADD_ASSIGN', '+=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=20) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (20, 'SUB_ASSIGN', '-=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=21) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (21, 'MUL_ASSIGN', '*=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=22) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (22, 'DIV_ASSIGN', '/=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=23) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (23, 'MOD_ASSIGN', '%=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=24) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (24, 'BT_AND_ASSIGN', '&=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=25) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (25, 'BT_XOR_ASSIGN', '^=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=26) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (26, 'BT_OR_ASSIGN', '|=', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=27) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (27, 'SCOPE', '::', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=28) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (28, 'NOT', 'NOT', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=29) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (29, 'AND', 'AND', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=30) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (30, 'ALL', 'ALL', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=31) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (31, 'ANY', 'ANY', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=32) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (32, 'BETWEEN', 'BETWEEN', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=33) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (33, 'IN', 'IN', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=34) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (34, 'LIKE', 'LIKE', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=35) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (35, 'OR', 'OR', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=36) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (36, 'SOME', 'SOME', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=37) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (37, 'EXISTS', 'EXISTS', 0, 0);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=38) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (38, 'BT_SHL', '<<', 0, 1);

IF NOT EXISTS (SELECT 1 FROM [Parser].[Operator] WHERE [Id]=39) 
INSERT INTO [Parser].[Operator] ([Id], [Name], [Operator], [Unary], [Binary]) 
VALUES (39, 'BT_SHR', '>>', 0, 1);



-- Completion time: 2024-03-18T20:59:41.4825981+00:00

GO
IF NOT EXISTS (SELECT 1 FROM [dbo].[Number])
BEGIN
	PRINT(N'Populating table [dbo].[Number]. This may take a while...');
	-- https://www.sommarskog.se/Short%20Stories/table-of-numbers.html#creatingnumbers
	WITH L0 AS (SELECT 1 AS c UNION ALL SELECT 1),
     L1   AS (SELECT 1 AS c FROM L0 AS A, L0 AS B),
     L2   AS (SELECT 1 AS c FROM L1 AS A, L1 AS B),
     L3   AS (SELECT 1 AS c FROM L2 AS A, L2 AS B),
     L4   AS (SELECT 1 AS c FROM L3 AS A, L3 AS B),
     L5   AS (SELECT 1 AS c FROM L4 AS A, L4 AS B),
     Nums AS (SELECT row_number() OVER(ORDER BY c) AS n FROM L5)
	INSERT INTO [dbo].[Number] ([N])
	SELECT n-1 
	FROM  Nums 
	WHERE n <= 1000001;
END
GO
IF NOT EXISTS (SELECT 1 FROM [Parser].[CharTypeMap])
BEGIN
	PRINT(N'Populating table [Parser].[CharTypeMap]...');
	INSERT INTO [Parser].[CharTypeMap]([Char], [TypeId])
	SELECT CHAR(n.[N]), [Parser].[GetCharType](CHAR(n.[N]))
	FROM [dbo].[Number] n
	WHERE n.[N] BETWEEN 1 AND 127 AND [Parser].[GetCharType](CHAR(n.[N]))<>0;
END
GO

GO

DECLARE @KW_ADD SMALLINT = 1;
DECLARE @KW_ALL SMALLINT = 2;
DECLARE @KW_ALTER SMALLINT = 3;
DECLARE @KW_AND SMALLINT = 4;
DECLARE @KW_ANY SMALLINT = 5;
DECLARE @KW_AS SMALLINT = 6;
DECLARE @KW_ASC SMALLINT = 7;
DECLARE @KW_AUTHORIZATION SMALLINT = 8;
DECLARE @KW_BACKUP SMALLINT = 9;
DECLARE @KW_BEGIN SMALLINT = 10;
DECLARE @KW_BETWEEN SMALLINT = 11;
DECLARE @KW_BREAK SMALLINT = 12;
DECLARE @KW_BROWSE SMALLINT = 13;
DECLARE @KW_BULK SMALLINT = 14;
DECLARE @KW_BY SMALLINT = 15;
DECLARE @KW_CASCADE SMALLINT = 16;
DECLARE @KW_CASE SMALLINT = 17;
DECLARE @KW_CHECK SMALLINT = 18;
DECLARE @KW_CHECKPOINT SMALLINT = 19;
DECLARE @KW_CLOSE SMALLINT = 20;
DECLARE @KW_CLUSTERED SMALLINT = 21;
DECLARE @KW_COALESCE SMALLINT = 22;
DECLARE @KW_COLLATE SMALLINT = 23;
DECLARE @KW_COLUMN SMALLINT = 24;
DECLARE @KW_COMMIT SMALLINT = 25;
DECLARE @KW_COMPUTE SMALLINT = 26;
DECLARE @KW_CONSTRAINT SMALLINT = 27;
DECLARE @KW_CONTAINS SMALLINT = 28;
DECLARE @KW_CONTAINSTABLE SMALLINT = 29;
DECLARE @KW_CONTINUE SMALLINT = 30;
DECLARE @KW_CONVERT SMALLINT = 31;
DECLARE @KW_CREATE SMALLINT = 32;
DECLARE @KW_CROSS SMALLINT = 33;
DECLARE @KW_CURRENT SMALLINT = 34;
DECLARE @KW_CURRENT_DATE SMALLINT = 35;
DECLARE @KW_CURRENT_TIME SMALLINT = 36;
DECLARE @KW_CURRENT_TIMESTAMP SMALLINT = 37;
DECLARE @KW_CURRENT_USER SMALLINT = 38;
DECLARE @KW_CURSOR SMALLINT = 39;
DECLARE @KW_DATABASE SMALLINT = 40;
DECLARE @KW_DBCC SMALLINT = 41;
DECLARE @KW_DEALLOCATE SMALLINT = 42;
DECLARE @KW_DECLARE SMALLINT = 43;
DECLARE @KW_DEFAULT SMALLINT = 44;
DECLARE @KW_DELETE SMALLINT = 45;
DECLARE @KW_DENY SMALLINT = 46;
DECLARE @KW_DESC SMALLINT = 47;
DECLARE @KW_DISK SMALLINT = 48;
DECLARE @KW_DISTINCT SMALLINT = 49;
DECLARE @KW_DISTRIBUTED SMALLINT = 50;
DECLARE @KW_DOUBLE SMALLINT = 51;
DECLARE @KW_DROP SMALLINT = 52;
DECLARE @KW_DUMP SMALLINT = 53;
DECLARE @KW_ELSE SMALLINT = 54;
DECLARE @KW_END SMALLINT = 55;
DECLARE @KW_ERRLVL SMALLINT = 56;
DECLARE @KW_ESCAPE SMALLINT = 57;
DECLARE @KW_EXCEPT SMALLINT = 58;
DECLARE @KW_EXEC SMALLINT = 59;
DECLARE @KW_EXECUTE SMALLINT = 60;
DECLARE @KW_EXISTS SMALLINT = 61;
DECLARE @KW_EXIT SMALLINT = 62;
DECLARE @KW_EXTERNAL SMALLINT = 63;
DECLARE @KW_FETCH SMALLINT = 64;
DECLARE @KW_FILE SMALLINT = 65;
DECLARE @KW_FILLFACTOR SMALLINT = 66;
DECLARE @KW_FOR SMALLINT = 67;
DECLARE @KW_FOREIGN SMALLINT = 68;
DECLARE @KW_FREETEXT SMALLINT = 69;
DECLARE @KW_FREETEXTTABLE SMALLINT = 70;
DECLARE @KW_FROM SMALLINT = 71;
DECLARE @KW_FULL SMALLINT = 72;
DECLARE @KW_FUNCTION SMALLINT = 73;
DECLARE @KW_GOTO SMALLINT = 74;
DECLARE @KW_GRANT SMALLINT = 75;
DECLARE @KW_GROUP SMALLINT = 76;
DECLARE @KW_HAVING SMALLINT = 77;
DECLARE @KW_HOLDLOCK SMALLINT = 78;
DECLARE @KW_IDENTITY SMALLINT = 79;
DECLARE @KW_IDENTITY_INSERT SMALLINT = 80;
DECLARE @KW_IDENTITYCOL SMALLINT = 81;
DECLARE @KW_IF SMALLINT = 82;
DECLARE @KW_IN SMALLINT = 83;
DECLARE @KW_INDEX SMALLINT = 84;
DECLARE @KW_INNER SMALLINT = 85;
DECLARE @KW_INSERT SMALLINT = 86;
DECLARE @KW_INTERSECT SMALLINT = 87;
DECLARE @KW_INTO SMALLINT = 88;
DECLARE @KW_IS SMALLINT = 89;
DECLARE @KW_JOIN SMALLINT = 90;
DECLARE @KW_KEY SMALLINT = 91;
DECLARE @KW_KILL SMALLINT = 92;
DECLARE @KW_LEFT SMALLINT = 93;
DECLARE @KW_LIKE SMALLINT = 94;
DECLARE @KW_LINENO SMALLINT = 95;
DECLARE @KW_LOAD SMALLINT = 96;
DECLARE @KW_MERGE SMALLINT = 97;
DECLARE @KW_NATIONAL SMALLINT = 98;
DECLARE @KW_NOCHECK SMALLINT = 99;
DECLARE @KW_NONCLUSTERED SMALLINT = 100;
DECLARE @KW_NOT SMALLINT = 101;
DECLARE @KW_NULL SMALLINT = 102;
DECLARE @KW_NULLIF SMALLINT = 103;
DECLARE @KW_OF SMALLINT = 104;
DECLARE @KW_OFF SMALLINT = 105;
DECLARE @KW_OFFSETS SMALLINT = 106;
DECLARE @KW_ON SMALLINT = 107;
DECLARE @KW_OPEN SMALLINT = 108;
DECLARE @KW_OPENDATASOURCE SMALLINT = 109;
DECLARE @KW_OPENQUERY SMALLINT = 110;
DECLARE @KW_OPENROWSET SMALLINT = 111;
DECLARE @KW_OPENXML SMALLINT = 112;
DECLARE @KW_OPTION SMALLINT = 113;
DECLARE @KW_OR SMALLINT = 114;
DECLARE @KW_ORDER SMALLINT = 115;
DECLARE @KW_OUTER SMALLINT = 116;
DECLARE @KW_OVER SMALLINT = 117;
DECLARE @KW_PERCENT SMALLINT = 118;
DECLARE @KW_PIVOT SMALLINT = 119;
DECLARE @KW_PLAN SMALLINT = 120;
DECLARE @KW_PRECISION SMALLINT = 121;
DECLARE @KW_PRIMARY SMALLINT = 122;
DECLARE @KW_PRINT SMALLINT = 123;
DECLARE @KW_PROC SMALLINT = 124;
DECLARE @KW_PROCEDURE SMALLINT = 125;
DECLARE @KW_PUBLIC SMALLINT = 126;
DECLARE @KW_RAISERROR SMALLINT = 127;
DECLARE @KW_READ SMALLINT = 128;
DECLARE @KW_READTEXT SMALLINT = 129;
DECLARE @KW_RECONFIGURE SMALLINT = 130;
DECLARE @KW_REFERENCES SMALLINT = 131;
DECLARE @KW_REPLICATION SMALLINT = 132;
DECLARE @KW_RESTORE SMALLINT = 133;
DECLARE @KW_RESTRICT SMALLINT = 134;
DECLARE @KW_RETURN SMALLINT = 135;
DECLARE @KW_REVERT SMALLINT = 136;
DECLARE @KW_REVOKE SMALLINT = 137;
DECLARE @KW_RIGHT SMALLINT = 138;
DECLARE @KW_ROLLBACK SMALLINT = 139;
DECLARE @KW_ROWCOUNT SMALLINT = 140;
DECLARE @KW_ROWGUIDCOL SMALLINT = 141;
DECLARE @KW_RULE SMALLINT = 142;
DECLARE @KW_SAVE SMALLINT = 143;
DECLARE @KW_SCHEMA SMALLINT = 144;
DECLARE @KW_SECURITYAUDIT SMALLINT = 145;
DECLARE @KW_SELECT SMALLINT = 146;
DECLARE @KW_SEMANTICKEYPHRASETABLE SMALLINT = 147;
DECLARE @KW_SEMANTICSIMILARITYDETAILSTABLE SMALLINT = 148;
DECLARE @KW_SEMANTICSIMILARITYTABLE SMALLINT = 149;
DECLARE @KW_SESSION_USER SMALLINT = 150;
DECLARE @KW_SET SMALLINT = 151;
DECLARE @KW_SETUSER SMALLINT = 152;
DECLARE @KW_SHUTDOWN SMALLINT = 153;
DECLARE @KW_SOME SMALLINT = 154;
DECLARE @KW_STATISTICS SMALLINT = 155;
DECLARE @KW_SYSTEM_USER SMALLINT = 156;
DECLARE @KW_TABLE SMALLINT = 157;
DECLARE @KW_TABLESAMPLE SMALLINT = 158;
DECLARE @KW_TEXTSIZE SMALLINT = 159;
DECLARE @KW_THEN SMALLINT = 160;
DECLARE @KW_TO SMALLINT = 161;
DECLARE @KW_TOP SMALLINT = 162;
DECLARE @KW_TRAN SMALLINT = 163;
DECLARE @KW_TRANSACTION SMALLINT = 164;
DECLARE @KW_TRIGGER SMALLINT = 165;
DECLARE @KW_TRUNCATE SMALLINT = 166;
DECLARE @KW_TRY_CONVERT SMALLINT = 167;
DECLARE @KW_TSEQUAL SMALLINT = 168;
DECLARE @KW_UNION SMALLINT = 169;
DECLARE @KW_UNIQUE SMALLINT = 170;
DECLARE @KW_UNPIVOT SMALLINT = 171;
DECLARE @KW_UPDATE SMALLINT = 172;
DECLARE @KW_UPDATETEXT SMALLINT = 173;
DECLARE @KW_USE SMALLINT = 174;
DECLARE @KW_USER SMALLINT = 175;
DECLARE @KW_VALUES SMALLINT = 176;
DECLARE @KW_VARYING SMALLINT = 177;
DECLARE @KW_VIEW SMALLINT = 178;
DECLARE @KW_WAITFOR SMALLINT = 179;
DECLARE @KW_WHEN SMALLINT = 180;
DECLARE @KW_WHERE SMALLINT = 181;
DECLARE @KW_WHILE SMALLINT = 182;
DECLARE @KW_WITH SMALLINT = 183;
DECLARE @KW_WITHIN SMALLINT = 184;
DECLARE @KW_WRITETEXT SMALLINT = 185;
DECLARE @KW_ATOMIC SMALLINT = 186;
DECLARE @KW_CONVERSATION SMALLINT = 187;
DECLARE @KW_DIALOG SMALLINT = 188;
DECLARE @KW_CATCH SMALLINT = 189;
DECLARE @KW_TRY SMALLINT = 190;
DECLARE @KW_THROW SMALLINT = 191;
DECLARE @KW_FILETABLE SMALLINT = 192;
DECLARE @KW_OUTPUT SMALLINT = 193;
DECLARE @KW_LOGIN SMALLINT = 194;
DECLARE @KW_AT SMALLINT = 195;
DECLARE @KW_DATA_SOURCE SMALLINT = 196;
DECLARE @KW_RECOMPILE SMALLINT = 197;
DECLARE @KW_RESULT SMALLINT = 198;
DECLARE @KW_SETS SMALLINT = 199;
DECLARE @KW_UNDEFINED SMALLINT = 200;
DECLARE @KW_NONE SMALLINT = 201;
DECLARE @KW_MORE_THAN_ONE SMALLINT = 32767;


DECLARE @ST_CREATE_PROCEDURE SMALLINT = 1;
DECLARE @ST_CREATE_TABLE SMALLINT = 2;
DECLARE @ST_EXEC SMALLINT = 3;
DECLARE @ST_SELECT SMALLINT = 4;
DECLARE @ST_INSERT SMALLINT = 5;
DECLARE @ST_UPDATE SMALLINT = 6;
DECLARE @ST_DELETE SMALLINT = 7;
DECLARE @ST_DECLARE SMALLINT = 8;
DECLARE @ST_SET SMALLINT = 9;

DECLARE @ST_TRUNCATE_TABLE SMALLINT = 10;
DECLARE @ST_DROP_TABLE SMALLINT = 11;

DECLARE @ST_BEGIN_TRANSACTION SMALLINT = 20;
DECLARE @ST_BEGIN_DISTRIBUTED_TRANSACTION SMALLINT = 21;
DECLARE @ST_COMMIT SMALLINT = 23;
DECLARE @ST_ROLLBACK SMALLINT = 24;

DECLARE @ST_IF SMALLINT = 31;
DECLARE @ST_WHILE SMALLINT = 32;
DECLARE @ST_CONTINUE SMALLINT = 33;
DECLARE @ST_BREAK SMALLINT = 34;
DECLARE @ST_THROW SMALLINT = 35;
DECLARE @ST_RAISERROR SMALLINT = 36;
DECLARE @ST_PRINT SMALLINT = 37;
DECLARE @ST_RETURN SMALLINT = 38;

-- DECLARE @ST_BEGIN_DIALOG SMALLINT = 101;
-- DECLARE @ST_BEGIN_CONVERSATION_TIMER SMALLINT = 102;


--DECLARE @ST_BEGIN_ATOMIC SMALLINT = 11;
--DECLARE @ST_BEGIN_TRY SMALLINT = 12;
--DECLARE @ST_BEGIN_CATCH SMALLINT = 13;


DECLARE @ET_KEYWORD TINYINT = 1;
DECLARE @ET_IDENTIFIER TINYINT = 2;
DECLARE @ET_OPERATOR TINYINT = 3;
DECLARE @ET_SEPARATOR TINYINT = 4;
DECLARE @ET_DELIMITER TINYINT = 5;
DECLARE @ET_STATEMENT TINYINT = 6;
DECLARE @ET_SEQUENCE_OF_STATEMENTS TINYINT = 7;
DECLARE @ET_BLOCK TINYINT = 8;
DECLARE @ET_LITERAL_STRING TINYINT = 9;
DECLARE @ET_SEQUENCE TINYINT = 10;
DECLARE @ET_END TINYINT = 11;
DECLARE @ET_LITERAL_INT TINYINT = 12;
DECLARE @ET_VARIABLE_NAME TINYINT = 13;
DECLARE @ET_SPECIAL_SEQUENCE TINYINT = 14;
DECLARE @ET_LITERAL TINYINT = 15;

DECLARE @SQT_NORMAL TINYINT = 1;
DECLARE @SQT_ANY_STATEMENT TINYINT = 2;
DECLARE @SQT_BLOCK_STATEMENT TINYINT = 3;
DECLARE @SQT_SEQUENCE_OF_STATEMENTS TINYINT = 4;
DECLARE @SQT_TWO_PART_IDENTIFIER TINYINT = 5;
DECLARE @SQT_THREE_PART_IDENTIFIER TINYINT = 6;
DECLARE @SQT_MORE_TOKENS TINYINT = 7;
DECLARE @SQT_LABEL TINYINT = 8;
DECLARE @SQT_BEGIN_BLOCK TINYINT = 9;
DECLARE @SQT_END_BLOCK TINYINT = 10;
DECLARE @SQT_SEQUENCE_IN_PARENTHESES TINYINT = 11;
DECLARE @SQT_FOUR_PART_IDENTIFIER TINYINT = 12;
DECLARE @SQT_SCALAR_EXPRESSION TINYINT = 13;
DECLARE @SQT_OUTPUT_CLAUSE TINYINT = 14;
DECLARE @SQT_CASE_EXPRESSION TINYINT = 15;
DECLARE @SQT_VAR_ASSIGN TINYINT = 16;
DECLARE @SQT_SP_NUMBER TINYINT = 17;
DECLARE @SQT_IDENTIFIER_DOT TINYINT = 18;


DECLARE @SP_IDENTIFIER TINYINT = 1;
DECLARE @SP_START_OF_PARAMETER_LIST TINYINT = 2;
DECLARE @SP_DEFINITION TINYINT = 3;
DECLARE @SP_CHILD_STATEMENT TINYINT = 4;


DECLARE @TT_NONE TINYINT = 0;
DECLARE @TT_WHITESPACE TINYINT = 1;
DECLARE @TT_COMMENT TINYINT = 2;
DECLARE @TT_IDENTIFIER TINYINT = 3;
DECLARE @TT_KEYWORD TINYINT = 4;
DECLARE @TT_DELIMITER TINYINT = 5;
DECLARE @TT_SEPARATOR TINYINT = 6;
DECLARE @TT_OPERATOR TINYINT = 7;
DECLARE @TT_LITERAL TINYINT = 8;
DECLARE @TT_UNKNOWN TINYINT = 255;

DECLARE @TST_SINGLE_LINE_COMMENT TINYINT = 1;
DECLARE @TST_MULTI_LINE_COMMENT TINYINT = 2;
DECLARE @TST_REGULAR_IDENTIFIER TINYINT = 3;
DECLARE @TST_IDENTIFIER_IN_BRACKETS TINYINT = 4;
DECLARE @TST_IDENTIFIER_IN_DOUBLE_QUOTES TINYINT = 5;
DECLARE @TST_STRING TINYINT = 6;
DECLARE @TST_UNICODE_STRING TINYINT = 7;
DECLARE @TST_INTEGER TINYINT = 8;
DECLARE @TST_DECIMAL TINYINT = 9;
DECLARE @TST_MONEY TINYINT = 10;
DECLARE @TST_REAL TINYINT = 11;
DECLARE @TST_BINARY TINYINT = 12;
DECLARE @TST_COMMA TINYINT = 13;
DECLARE @TST_SEMICOLON TINYINT = 14;
DECLARE @TST_PERIOD TINYINT = 15;
DECLARE @TST_VARIABLE_NAME TINYINT = 16;
DECLARE @TST_UNARY_OPERATOR TINYINT = 17;
DECLARE @TST_BINARY_OPERATOR TINYINT = 18;
DECLARE @TST_UNARY_OR_BINARY_OPERATOR TINYINT = 19;

DECLARE @OP_BT_NOT TINYINT = 1;
DECLARE @OP_MUL TINYINT = 2;
DECLARE @OP_DIV TINYINT = 3;
DECLARE @OP_MOD TINYINT = 4;
DECLARE @OP_ADD TINYINT = 5;
DECLARE @OP_SUB TINYINT = 6;
DECLARE @OP_BT_AND TINYINT = 7;
DECLARE @OP_BT_XOR TINYINT = 8;
DECLARE @OP_BT_OR TINYINT = 9;
DECLARE @OP_EQ TINYINT = 10;
DECLARE @OP_GT TINYINT = 11;
DECLARE @OP_LT TINYINT = 12;
DECLARE @OP_GE TINYINT = 13;
DECLARE @OP_LE TINYINT = 14;
DECLARE @OP_NE TINYINT = 15;
DECLARE @OP_NE2 TINYINT = 16;
DECLARE @OP_NGT TINYINT = 17;
DECLARE @OP_NLT TINYINT = 18;
DECLARE @OP_ADD_ASSIGN TINYINT = 19;
DECLARE @OP_SUB_ASSIGN TINYINT = 20;
DECLARE @OP_MUL_ASSIGN TINYINT = 21;
DECLARE @OP_DIV_ASSIGN TINYINT = 22;
DECLARE @OP_MOD_ASSIGN TINYINT = 23;
DECLARE @OP_BT_AND_ASSIGN TINYINT = 24;
DECLARE @OP_BT_XOR_ASSIGN TINYINT = 25;
DECLARE @OP_BT_OR_ASSIGN TINYINT = 26;
DECLARE @OP_SCOPE TINYINT = 27;
DECLARE @OP_NOT TINYINT = 28;
DECLARE @OP_AND TINYINT = 29;
DECLARE @OP_ALL TINYINT = 30;
DECLARE @OP_ANY TINYINT = 31;
DECLARE @OP_BETWEEN TINYINT = 32;
DECLARE @OP_IN TINYINT = 33;
DECLARE @OP_LIKE TINYINT = 34;
DECLARE @OP_OR TINYINT = 35;
DECLARE @OP_SOME TINYINT = 36;
DECLARE @OP_EXISTS TINYINT = 37;
DECLARE @OP_BT_SHL TINYINT = 38;
DECLARE @OP_BT_SHR TINYINT = 39;

DELETE FROM [Parser].[TSqlSeqElement];
DELETE FROM [Parser].[TSqlSequence];
DBCC CHECKIDENT ('[Parser].[TSqlSequence]', RESEED, 0);
DELETE FROM [ParserEnum].[TSqlStatementType];

ALTER SEQUENCE [Parser].[TSqlSeqEl]  
RESTART WITH 1;  


INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_CREATE_PROCEDURE, 'CreateProcedure', @KW_CREATE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_CREATE_TABLE, 'CreateTable', @KW_CREATE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_EXEC, 'Exec', @KW_MORE_THAN_ONE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_DECLARE, 'Declare', @KW_DECLARE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_SET, 'Set', @KW_SET, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_SELECT, 'Select', @KW_SELECT, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_INSERT, 'Insert', @KW_INSERT, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_UPDATE, 'Update', @KW_UPDATE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_DELETE, 'Delete', @KW_DELETE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_BEGIN_TRANSACTION, 'BeginTran', @KW_BEGIN, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_BEGIN_DISTRIBUTED_TRANSACTION, 'BeginDistTran', @KW_BEGIN, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_COMMIT, 'Commit', @KW_COMMIT, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_ROLLBACK, 'Rollback', @KW_ROLLBACK, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_TRUNCATE_TABLE, 'TruncateTable', @KW_TRUNCATE, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_DROP_TABLE, 'DropTable', @KW_DROP, 0, 0, 0);


INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_IF, 'If', @KW_IF, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_WHILE, 'While', @KW_WHILE, 1, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_CONTINUE, 'Continue', @KW_CONTINUE, 1, 1, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_BREAK, 'Break', @KW_BREAK, 1, 1, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_THROW, 'Throw', @KW_THROW, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_RAISERROR, 'RaisError', @KW_RAISERROR, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_PRINT, 'Print', @KW_PRINT, 0, 0, 0);

INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_RETURN, 'Return', @KW_RETURN, 0, 0, 0);

/*
INSERT INTO [ParserEnum].[TSqlStatementType]
([Id], [Name], [StartKeywordId], [AlwaysStartWithStartKeyword], [IsSingleKeywordStatement], [CannotStopPreviousStatement])
VALUES (@ST_BEGIN_DIALOG, 'BeginDialog', @KW_BEGIN, 0, 0, 0);
*/


DECLARE @seqId SMALLINT;

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<sql_statement>', @SQT_ANY_STATEMENT);

SET @seqId=SCOPE_IDENTITY();

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<sql_statements>', @SQT_SEQUENCE_OF_STATEMENTS);

SET @seqId=SCOPE_IDENTITY();

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<sql_block>', @SQT_BLOCK_STATEMENT);

SET @seqId=SCOPE_IDENTITY();

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<more_tokens>', @SQT_MORE_TOKENS);

SET @seqId=SCOPE_IDENTITY();

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<seq_in_parentheses>', @SQT_SEQUENCE_IN_PARENTHESES);

SET @seqId=SCOPE_IDENTITY();

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<case_expression>', @SQT_CASE_EXPRESSION);

SET @seqId=SCOPE_IDENTITY();

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<identifier_dot>', @SQT_IDENTIFIER_DOT);

SET @seqId=SCOPE_IDENTITY();

DECLARE @id INT;  

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id, @ET_IDENTIFIER, @seqId, 1, @id + 1, NULL, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 1, @ET_SEPARATOR, @seqId, 0, @id + 2, NULL, NULL, NULL, @TT_SEPARATOR, @TST_PERIOD);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);



INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<two_part_identifier>', @SQT_TWO_PART_IDENTIFIER);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id, @ET_SEQUENCE, @seqId, 1, @id + 1, @id + 1, NULL, NULL, @SQT_IDENTIFIER_DOT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 1, @ET_IDENTIFIER, @seqId, 0, @id + 2, NULL, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<three_part_identifier>', @SQT_THREE_PART_IDENTIFIER);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id, @ET_SEQUENCE, @seqId, 1, @id + 1, NULL, NULL, NULL, @SQT_TWO_PART_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 1, @ET_SEPARATOR, @seqId, 0, @id + 2, @id + 3, NULL, NULL, @TT_SEPARATOR, @TST_PERIOD);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 2, @ET_IDENTIFIER, @seqId, 0, @id + 3, NULL, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 3, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<four_part_identifier>', @SQT_FOUR_PART_IDENTIFIER);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id, @ET_SEQUENCE, @seqId, 1, @id + 1, NULL, NULL, NULL, @SQT_THREE_PART_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 1, @ET_SEPARATOR, @seqId, 0, @id + 2, @id + 3, NULL, NULL, @TT_SEPARATOR, @TST_PERIOD);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 2, @ET_IDENTIFIER, @seqId, 0, @id + 3, NULL, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 3, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<scalar_expression>', @SQT_SCALAR_EXPRESSION);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 20;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id, @ET_LITERAL, @seqId, 1, @id + 15, @id + 1, NULL, NULL, @TT_LITERAL, NULL);


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 1, @ET_IDENTIFIER, @seqId, 0, @id + 2, @id + 4, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 2, @ET_SEPARATOR, @seqId, 0, @id + 1, @id + 3, NULL, NULL, @TT_SEPARATOR, @TST_PERIOD);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 3, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 4, @id + 15, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 4, @ET_KEYWORD, @seqId, 0, @id + 5, @id + 6, @KW_OVER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 5, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 15, @id + 15, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 6, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 15, @id + 7, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 7, @ET_OPERATOR, @seqId, 0, @id, @id + 8, NULL, NULL, @TT_OPERATOR, @TST_UNARY_OPERATOR);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 8, @ET_OPERATOR, @seqId, 0, @id, @id + 9, NULL, NULL, @TT_OPERATOR, @TST_UNARY_OR_BINARY_OPERATOR);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 9, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 15, NULL, NULL, NULL, @SQT_CASE_EXPRESSION, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 15, @ET_OPERATOR, @seqId, 0, @id, @id + 16, NULL, NULL, @TT_OPERATOR, @TST_BINARY_OPERATOR);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 16, @ET_OPERATOR, @seqId, 0, @id, @id + 17, NULL, NULL, @TT_OPERATOR, @TST_UNARY_OR_BINARY_OPERATOR);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 17, @ET_KEYWORD, @seqId, 0, @id, @id + 18, @KW_AND, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 18, @ET_KEYWORD, @seqId, 0, @id, @id + 19, @KW_OR, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 19, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<output_clause>', @SQT_OUTPUT_CLAUSE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 10;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_OUTPUT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SEQUENCE, @seqId, 0, @id + 2, NULL, NULL, NULL, @SQT_SCALAR_EXPRESSION, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 2, @ET_KEYWORD, @seqId, 0, @id + 3, @id + 3, @KW_AS, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 3, @ET_IDENTIFIER, @seqId, 0, @id + 4, @id + 4, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 4, @ET_SEPARATOR, @seqId, 0, @id + 1, @id + 5, NULL, NULL, @TT_SEPARATOR, @TST_COMMA);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 5, @ET_KEYWORD, @seqId, 0, @id + 6, @id + 8, @KW_INTO, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 6, @ET_IDENTIFIER, @seqId, 0, @id + 7, NULL, NULL, NULL, @TT_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 7, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 8, @id + 8, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 8, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<var_assign>', @SQT_VAR_ASSIGN);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id, @ET_VARIABLE_NAME, @seqId, 1, @id + 1, NULL, NULL, NULL, @TT_IDENTIFIER, @TST_VARIABLE_NAME);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_OPERATOR, @seqId, 0, @id + 2, NULL, NULL, @OP_EQ);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [SequenceTypeId])
VALUES ('<sp_number>', @SQT_SP_NUMBER);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;
-- 
INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id, @ET_SEPARATOR, @seqId, 1, @id + 1, NULL, NULL, NULL, @TT_SEPARATOR, @TST_SEMICOLON);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_LITERAL_INT, @seqId, 0, @id + 2, NULL, NULL, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);




-- https://learn.microsoft.com/en-us/sql/t-sql/statements/create-procedure-transact-sql?view=sql-server-ver16
INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('CreateProcedure', @ST_CREATE_PROCEDURE);

SET @seqId=SCOPE_IDENTITY();


EXEC  @id = [Parser].[GetSeqElemIdRange] 10;

-- SELECT @id;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_CREATE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 2, @id + 3, @KW_OR, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 2, @ET_KEYWORD, @seqId, 0, @id + 3, NULL, @KW_ALTER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 5, @id + 4, @KW_PROC, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 4, @ET_KEYWORD, @seqId, 0, @id + 5, NULL, @KW_PROCEDURE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 5, @ET_SEQUENCE, @seqId, 0, @id + 6, NULL, NULL, NULL, @SQT_TWO_PART_IDENTIFIER, @SP_IDENTIFIER);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 6, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Select', @ST_SELECT);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_SELECT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

-- https://learn.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql?view=sql-server-ver16
INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Insert', @ST_INSERT);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 25;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_INSERT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 2, @id + 4, @KW_TOP, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 3, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 4, @id + 4, @KW_PERCENT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 4, @ET_KEYWORD, @seqId, 0, @id + 5, @id + 5, @KW_INTO, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 5, @ET_SEQUENCE, @seqId, 0, @id + 9, @id + 6, NULL, NULL, @SQT_FOUR_PART_IDENTIFIER, @SP_IDENTIFIER);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 6, @ET_KEYWORD, @seqId, 0, @id + 8, @id + 7, @KW_OPENQUERY, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 7, @ET_KEYWORD, @seqId, 0, @id + 8, @id + 9, @KW_OPENROWSET, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 8, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 9, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 9, @ET_KEYWORD, @seqId, 0, @id + 10, @id + 11, @KW_WITH, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 10, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 11, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

-- ( column_list ) 
INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 11, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 12, @id + 12, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

-- OUTPUT clause
INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 12, @ET_SEQUENCE, @seqId, 0, @id + 13, @id + 13, NULL, NULL, @SQT_OUTPUT_CLAUSE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 13, @ET_KEYWORD, @seqId, 0, @id + 14, @id + 16, @KW_VALUES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 14, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 15, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 15, @ET_SEPARATOR, @seqId, 0, @id + 14, @id + 24, NULL, NULL, @TT_SEPARATOR, @TST_COMMA);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 16, @ET_KEYWORD, @seqId, 0, @id + 17, @id + 18, @KW_DEFAULT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 17, @ET_KEYWORD, @seqId, 0, @id + 24, NULL, @KW_VALUES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId], [TokenTypeId], [TokenSubtypeId], [StatementTypeId])
VALUES
(@id + 18, @ET_STATEMENT, @seqId, 0, @id + 24, @id + 19, NULL, NULL, NULL, @SP_CHILD_STATEMENT, NULL, NULL, @ST_SELECT);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId], [TokenTypeId], [TokenSubtypeId], [StatementTypeId])
VALUES
(@id + 19, @ET_STATEMENT, @seqId, 0, @id + 24, NULL, NULL, NULL, NULL, @SP_CHILD_STATEMENT, NULL, NULL, @ST_EXEC);




-- *****
-- SELECT
-- EXEC


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 24, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Update', @ST_UPDATE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_UPDATE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Delete', @ST_DELETE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_DELETE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);


-- https://learn.microsoft.com/en-us/sql/t-sql/statements/truncate-table-transact-sql?view=sql-server-ver16
INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('TruncateTable', @ST_TRUNCATE_TABLE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 10;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_TRUNCATE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 2, NULL, @KW_TABLE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_SEQUENCE, @seqId, 0, @id + 3, NULL, NULL, NULL, @SQT_THREE_PART_IDENTIFIER, @SP_IDENTIFIER);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 4, @id + 5, @KW_WITH, NULL);


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 4, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 5, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 5, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);






INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('DropTable', @ST_DROP_TABLE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 10;

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_DROP, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 2, NULL, @KW_TABLE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 2, @ET_KEYWORD, @seqId, 0, @id + 3, @id + 4, @KW_IF, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 4, NULL, @KW_EXISTS, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 4, @ET_SEQUENCE, @seqId, 0, @id + 5, NULL, NULL, NULL, @SQT_THREE_PART_IDENTIFIER, @SP_IDENTIFIER);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 5, @ET_SEPARATOR, @seqId, 0, @id + 4, @id + 6, NULL, NULL, @TT_SEPARATOR, @TST_COMMA);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 6, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);



-- *****


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('CreateTable', @ST_CREATE_TABLE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 10

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_CREATE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 2, NULL, @KW_TABLE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_SEQUENCE, @seqId, 0, @id + 3, NULL, NULL, NULL, @SQT_THREE_PART_IDENTIFIER, @SP_IDENTIFIER);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 4, @id + 5, @KW_AS, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 4, @ET_KEYWORD, @seqId, 0, @id + 5, NULL, @KW_FILETABLE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 5, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 6, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

/*
[ ON { partition_scheme_name ( partition_column_name )
           | filegroup
           | "default" } ]
    [ TEXTIMAGE_ON { filegroup | "default" } ]
    [ FILESTREAM_ON { partition_scheme_name
           | filegroup
           | "default" } ]
*/

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 6, @ET_KEYWORD, @seqId, 0, @id + 7, @id + 8, @KW_WITH, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 7, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 8, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 8, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


-- https://learn.microsoft.com/en-us/sql/t-sql/language-elements/execute-transact-sql?view=sql-server-ver16
INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Exec', @ST_EXEC);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 35

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 2, @id + 1, @KW_EXEC, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 1, @id + 2, NULL, @KW_EXECUTE, NULL);


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 2, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 3, @id + 12, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 4, @id + 8, @KW_AS, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 4, @ET_KEYWORD, @seqId, 0, @id + 6, @id + 5, @KW_LOGIN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 5, @ET_KEYWORD, @seqId, 0, @id + 6, NULL, @KW_USER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 6, @ET_OPERATOR, @seqId, 0, @id + 7, NULL, NULL, @OP_EQ);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 7, @ET_LITERAL_STRING, @seqId, 0, @id + 8, NULL, NULL, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 8, @ET_KEYWORD, @seqId, 0, @id + 9, @id + 34, @KW_AT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 9, @ET_KEYWORD, @seqId, 0, @id + 10, @id + 10, @KW_DATA_SOURCE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 10, @ET_IDENTIFIER, @seqId, 0, @id + 34, NULL, NULL, NULL, @TT_IDENTIFIER, NULL);


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 12, @ET_SEQUENCE, @seqId, 0, @id + 13, @id + 13, NULL, NULL, @SQT_VAR_ASSIGN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 13, @ET_VARIABLE_NAME, @seqId, 0, @id + 16, @id + 14, NULL, NULL, @TT_IDENTIFIER, @TST_VARIABLE_NAME);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 14, @ET_SEQUENCE, @seqId, 0, @id + 15, NULL, NULL, NULL, @SQT_FOUR_PART_IDENTIFIER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 15, @ET_SEQUENCE, @seqId, 0, @id + 16, @id + 16, NULL, NULL, @SQT_SP_NUMBER, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 16, @ET_SEQUENCE, @seqId, 0, @id + 17, @id + 17, NULL, NULL, @SQT_VAR_ASSIGN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 17, @ET_LITERAL, @seqId, 0, @id + 21, @id + 18, NULL, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 18, @ET_VARIABLE_NAME, @seqId, 0, @id + 19, @id + 20, NULL, NULL, @TT_IDENTIFIER, @TST_VARIABLE_NAME);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 19, @ET_KEYWORD, @seqId, 0, @id + 21, @id + 21, @KW_OUTPUT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 20, @ET_KEYWORD, @seqId, 0, @id + 21, @id + 22, @KW_DEFAULT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 21, @ET_SEPARATOR, @seqId, 0, @id + 16, @id + 22, NULL, NULL, @TT_SEPARATOR, @TST_COMMA);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 22, @ET_KEYWORD, @seqId, 0, @id + 23, @id + 34, @KW_WITH, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 23, @ET_KEYWORD, @seqId, 0, @id + 29, @id + 24, @KW_RECOMPILE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 24, @ET_KEYWORD, @seqId, 0, @id + 25, NULL, @KW_RESULT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 25, @ET_KEYWORD, @seqId, 0, @id + 26, NULL, @KW_SETS, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 26, @ET_KEYWORD, @seqId, 0, @id + 29, @id + 27, @KW_UNDEFINED, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 27, @ET_KEYWORD, @seqId, 0, @id + 29, @id + 28, @KW_NONE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 28, @ET_SPECIAL_SEQUENCE, @seqId, 0, @id + 29, NULL, NULL, NULL, @SQT_SEQUENCE_IN_PARENTHESES, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [TokenTypeId], [TokenSubtypeId])
VALUES
(@id + 29, @ET_SEPARATOR, @seqId, 0, @id + 23, @id + 34, NULL, NULL, @TT_SEPARATOR, @TST_COMMA);


INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 34, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Declare', @ST_DECLARE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_DECLARE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Set', @ST_SET);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_SET, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('BeginTran', @ST_BEGIN_TRANSACTION);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_BEGIN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 3, @id + 2, @KW_TRAN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 2, @ET_KEYWORD, @seqId, 0, @id + 3, NULL, @KW_TRANSACTION, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 3, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('BeginDistTran', @ST_BEGIN_DISTRIBUTED_TRANSACTION);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_BEGIN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 1, @ET_KEYWORD, @seqId, 0, @id + 2, NULL, @KW_DISTRIBUTED, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 2, @ET_KEYWORD, @seqId, 0, @id + 4, @id + 3, @KW_TRAN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id + 3, @ET_KEYWORD, @seqId, 0, @id + 4, NULL, @KW_TRANSACTION, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 4, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Commit', @ST_COMMIT);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_COMMIT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);


INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Rollback', @ST_ROLLBACK);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_ROLLBACK, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('If', @ST_IF);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_IF, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('While', @ST_WHILE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_WHILE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Continue', @ST_CONTINUE);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 2

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_CONTINUE, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Break', @ST_BREAK);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 2

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_BREAK, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_END, @seqId, 0, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Throw', @ST_THROW);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_THROW, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('RaisError', @ST_RAISERROR);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_RAISERROR, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Print', @ST_PRINT);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_PRINT, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

INSERT INTO [Parser].[TSqlSequence] ([Name], [StatementTypeId])
VALUES ('Return', @ST_RETURN);

SET @seqId=SCOPE_IDENTITY();

EXEC  @id = [Parser].[GetSeqElemIdRange] 5

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId])
VALUES
(@id, @ET_KEYWORD, @seqId, 1, @id + 1, NULL, @KW_RETURN, NULL);

INSERT INTO [Parser].[TSqlSeqElement]
([Id], [TypeId], [SequenceId], [IsStartElement], [NextElementId], [AltElementId], [KeywordId], [OperatorId], [SequenceTypeId], [StatementPartId])
VALUES
(@id + 1, @ET_SPECIAL_SEQUENCE, @seqId, 0, NULL, NULL, NULL, NULL, @SQT_MORE_TOKENS, NULL);

UPDATE [Parser].[TSqlSeqElement]
SET [TokenTypeId]=@TT_KEYWORD WHERE [TypeId]=@ET_KEYWORD AND ISNULL([TokenTypeId],@TT_NONE)<>@TT_KEYWORD;

GO


DECLARE @version VARCHAR(50) = '0.7.2';
DECLARE @description NVARCHAR(500) = N'Fixed bug around matching table and stored procedure names.'

IF NOT EXISTS (SELECT 1 FROM [dbo].[Version] WHERE [Version]=@version)
BEGIN
	INSERT INTO [dbo].[Version] ([Version], [Description])
	VALUES (@version, @description);
END

GO

GO
PRINT N'Update complete.';


GO
